2/9/18
started developing with the genotype-phenotype map
start that with a pathway

							|--(enz 1)--> 2 --(enz 2)--> 3
	molec 0 --(enz 0)--> 1 -|
	        				|--(enz 3)--> 4 --(enz 4)--> 5 --(enz 5)--> 6
	        				
recursive tracing seems to be working

2/10/18
made simple GUI for playing

----------------------------
BIG PICTURE

works in phases

1) it generates ~20 mutants randomly in the genes - single mutants
	make sure that all are hit at least once

2) presents them in complementation test table 20x20
	user selects medium for complementation test and it shows table of +, -
	user can drag columns of table to make nice groups (it looks like this is built into tables)
	https://docs.oracle.com/javase/7/docs/api/javax/swing/JTable.html says "By default, 
	columns may be rearranged in the JTable so that the view's columns appear in a different 
	order to the columns in the model."

3) user selects certain mutants to put in "working set"
	can edit this set

4) go to pathway where you can make a multiple mutant and see which media is grows on
	(like the current toy version) 
	where the mutants in the working set are the choices
	
5) mapping?


2/12/18
started working on MutantSet and mutant generation.

working on complementation test table - not working yet..

2/13/18
the problem was that new ArrayList<Integer>(new Integer(1)) makes an ArrayList of LENGTH 1
	not a list that starts with one member...

now seems to be working
it'd be nice, when you reorder the columns, that you also re-order the rows the same.
DefaultTableModel (which you gan get with getModel() from the table) has a moveRow() method
need to find out which colum moved.

the problem is that moveRow() exists only in DefaultTableModel and I don't want a Default
	since I don't want the contents to be editable.
now can drag the columns and no errors with moveRow but the rows don't actually move...

may have to make a method that changes the data in the table - now it works.

2/14/18
try custom header renderer http://www.codejava.net/java-se/swing/jtable-column-header-custom-renderer-examples

		complementationTable.getTableHeader().setDefaultRenderer(new CheckBoxHeaderRenderer());
AND

	class CheckBoxHeaderRenderer extends JPanel implements TableCellRenderer {
		JLabel label;
		public CheckBoxHeaderRenderer () {
			label = new JLabel();
		}
		public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus,
				int row, int column) {
			if (column == 0) {
				label.setText(" ");
				add(label);
			} else {
				label.setText("M" + (column - 1));
				add(label);
//				add(checkboxes[column]);
			}
			return this;
		}
	}

but that fails since, when you drag, it renumbers the columns in order 0-15 not in revised order.

hmmm....

would also like to prevent the first column from being dragged to or from
https://stackoverflow.com/questions/1155137/how-to-keep-a-single-column-from-being-reordered-in-a-jtable/1155277#1155277
the last solution there might work...

tried moving the ComplementationTable to a separate class that extends JTable and it didn't work
	the drag only dragged the column headers...
went back to complex class ComplementationTestPanel - punt for now

put things in tabs

found a solution to the dragging column thing
	https://coderanch.com/t/346302/java/Restrict-User-Move-Column-JTable
need to put this right after constructor and right before setting the table model or it's all messed up

made sketch of what the Complementation table panel should look like in "notes/Comp test panel notes - 0.png"

2/15/18
working on putting a JComboBox for selecting the complementation group into the last column
can get a combobox in there but it won't hold the value...

go back and do it carefully like the official page says:
https://docs.oracle.com/javase/tutorial/uiswing/components/table.html#data

put the JComboBox in the column and then set a custom renderer.
can get the JComboBox in there but it doesn't respond to clicking
seem to need to set up a custom editor.
	try having the ComplementationGroupComboBox be an editor
PUNT - just make the last cells editable so students can type in their own group.

hmmm - to make a cell editable, you need to add to the TableModel the setValueAt() method
maybe that was what was needed for the combo boxes...
try one last time - NG
	you can edit one once but
		you can't edit any others
		it doesn't move when you drag a column
REALLY PUNT - and use user-entered text for complementation group name

works now with text input

need to figure out how to save the state - xml is a pain with the added libraries, maybe there's an easier way?
it looks like json may be better http://www.oracle.com/technetwork/articles/java/json-1973242.html 
but it's not built-in <sigh>

2/16/18
try using gson - google's json library
try installing it like https://medium.com/programmers-blockchain/importing-gson-into-eclipse-ec8cf678ad52
from http://repo1.maven.org/maven2/com/google/code/gson/gson/2.8.2/
	got gson-2.8.2.jar and put in YeastVGL/lib/
	in Eclipse=> prefs (not the prefs for this project)
		java build path => user libraries
		new "gson_lib"
		add the jar as an external jar
	in prefs for this project
		build path => add libraries => user library => choose "gson_lib"
but it has an error flag that says the jar is missing...
	did a refresh and it's OK.
	
had to add line to build.xml to include the jar
	<target name="jarfile" depends="compile" description="makes jar file">
	    <jar destfile="bin/YeastVGL.jar">
	        <manifest>
	        	    <attribute name="Main-Class" value="YeastVGL.YeastVGL"/>
	        </manifest>
    	    <fileset dir="bin/"/>
	    	<zipfileset src="lib/gson-2.8.2.jar"/>
	    </jar>

2/26/18
working on saving and restoring the complementation table - including the results of rearranging it
it seems that 
	public String getJsonString() {
		Gson gson = new Gson();
		return gson.toJson(data);
	}
works to get out the revised table - now see if you can save it and read it back in
reading it in is AOK - EXCEPT: the column headings are in original order
	it seems that moving columns changes the DISPLAY not the underlying table

hmmm - actually, the saving isn't quite right - the rows are in the right order but the columns aren't...
may need to, when moving columns, actually change the underlying column data
	that's NG - then the column never gets swapped...
	
try swapping the columns when you go to save it.
that was a pain, but it now works.

made WelcomePane to start a new problem or load a saved one

2/27/18
getting open and save working

3/1/18
to do
- instructions pane for pathway panel
- work out working set details
	have them displayed on the left of the pathway panel in vertical column
		"check boxes for mutations to be included in your strain"
			"no checked boxes = wild type"
			[] mutation in strain m3 - complementation group fred (don't print it if it's the default text)
	do an aggregate genotype
		the reverse of the complementation test
			if any is false, make it false

got complementation group labeling to save (and cg is now part of each MutantStrain)
working on getting the working set to show in the PathwayPanel.
	need, if nothing in working set, to display message in panel "none selected"

3/2/18
working on pathway panel to use the working set
something's strange about the "will it grow" - maybe the composite genotype is wrong?

it may be working - need to check carefully
lots of printing in PathwayPanel to clean out when it's going.

3/5/18
need to build a tool to have them enter their answer for the pathway
	not a tool to help them figure it out - too complicated and idiosyncratic
see the sketch "/YeastVGL/notes/tool for drawing pathways - 0.png"
use a grid of little panels with a popup menu like in Pelican.java line 2066 (Pelican extends JPanel)
		private void maybeShowPopup(MouseEvent e)  {

			int x = e.getX();
			int y = e.getY();

			final Component c = getComponentAt(x,y);

			if (c instanceof PelicanPerson) {
				PelicanPerson p=(PelicanPerson)c;
				if (e.isPopupTrigger()) {
					if (p.isOrphan()) Parents.setEnabled(true);
					else Parents.setEnabled(false);
					popup.show(e.getComponent(),x,y);
					currentPerson=(PelicanPerson)c;
				}
				else {
					if (mergeEnabled) {
						mergePerson((PelicanPerson)c);
						updateDisplay();
					}
					else {
						currentPerson=(PelicanPerson)c;
					}
				}
			}
			setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			mergeEnabled=false;

		}

- indicate the essential terminal products with green letters.
have light pastel colored columns to indicate type
	molecule
	link
	enzyme
- have the tile images share the background color

for scoring
	convert to pathway as used in the program
	walk recursively thru both while comparing
		like the pedigree solver
		if you exhaust all possibilities in the "correct" one without a match - it's wrong
		
as they draw, can use the check pedigree code and have a little text window with "problems"

first, to make this work, they can't have arbitrarily long names for the complementation groups
	since they'll be in the labels
but the JMenu didn't work
	how about a JPopupMenu like in the PedigreeExplorer?
got that working.