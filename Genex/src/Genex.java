/* this is the main class - the genex application * written by Brian White 2004 *  brian.white@umb.edu *   This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. **/ import java.awt.*;import java.awt.event.*;import javax.swing.*;import javax.swing.event.*;import javax.swing.text.html.*;import java.net.*;public class Genex {	static JFrame frame = new JFrame("Gene explorer");	static JTextPane textPane = new JTextPane();	static JLabel infoLabel = new JLabel("Selected Base = ");	static JButton resetButton = new JButton("Reset DNA Sequence");	static JButton newSequenceButton = new JButton("Enter New DNA Sequence");		static JButton addCaptionButton = new JButton("Enter a Caption");	static JButton printButton = new JButton("Print");	static JButton bwPrintButton = new JButton("Print in B&W");	static JButton helpButton = new JButton("Help");	static JButton aboutButton = new JButton("About");	static JLabel versionLabel = new JLabel("1.2");		static String defaultDNA = new String("CAAGGCTATAACCGAGATTGATGCCTTGTGCG" 	                                    + "ATAAGGTGTGTCCCCCCCCAAAGTGTCGGATG"	                                    + "TCGAGTGCGCGTGCAAAAAAAAACAAAGGCGA"	                                    + "GGACCTTAAGAAGGTGTGAGGGGGCGCTCGAT");    static String promoterSequence = "TATAA";    static String terminatorSequence = "GGGGG";    static String intronStartSequence = "GUGCG";    static String intronEndSequence = "CAAAG";    static String polyATail = "AAAAAAAAAAAAA";	                                        	static String DNA = defaultDNA;	static int headerLength;        //length (as actually displayed) of the text 	                                // & labels before the start of the top DNA strand	static int DNASequenceLength = defaultDNA.length();		static String caption;         //the caption at the bottom of the frame		static String previousProteinString;  //the last protein sequence displayed	static String currentProteinString;  //the current protein string		static int caretPosition = 0;  //the number of the selected DNA base		static DocumentRenderer docRenderer;  // for printing			public static void main (String[] args) {		    JScrollPane scrollPane = new JScrollPane(textPane);	    JPanel sequencePanel = new JPanel();	    JPanel printPanel = new JPanel();	    	    docRenderer = new DocumentRenderer();	    	    sequencePanel.add(resetButton);	    sequencePanel.add(newSequenceButton);	    sequencePanel.add(infoLabel);	    	    printPanel.add(addCaptionButton);	    printPanel.add(printButton);	    printPanel.add(bwPrintButton);	    printPanel.add(helpButton);	    printPanel.add(aboutButton);	    printPanel.add(versionLabel);	    	    frame.getContentPane().add(printPanel, BorderLayout.NORTH);	    frame.getContentPane().add(sequencePanel, BorderLayout.SOUTH);	    frame.getContentPane().add(scrollPane, BorderLayout.CENTER);	 	       	    textPane.setContentType("text/html");	    textPane.setDragEnabled(false);	    textPane.setEditable(false);	    	    addCaptionButton.setToolTipText("Add a descriptive caption to the bottom of the page.");        caption = "";	    printButton.setToolTipText("<html>Print the page in color.<br>" +			"<font color=red>This does not work well with Windows.</font></html>");	    bwPrintButton.setToolTipText("<html>Print the page in black and white.<br>" +	    	"<font color=green>This works better with Windows.</font></html>");	    helpButton.setToolTipText("Open a window with help info.");	    	    resetButton.setToolTipText("Restore the original DNA Sequence");	    newSequenceButton.setToolTipText("Enter an entirely new DNA sequence");	    	    caption = new String("");	    previousProteinString = new String("");	    currentProteinString = new String("");	    	    //display the default gene	    VisibleGene currentGene = expressGene(defaultDNA, -1);	    textPane.setText(currentGene.getColorHTML() + caption + "</pre></body></html>");	    headerLength = currentGene.getGene().getHeaderLength();	    DNASequenceLength = currentGene.getGene().getDNASequenceLength();        currentProteinString = currentGene.getGene().getProteinString();//        currentGene.getGene().showItAll();	    	    //display the gene with a selected base        textPane.addCaretListener(new CaretListener() {            public void caretUpdate(CaretEvent e) {                int dot = e.getDot();                int clickSite = dot - headerLength;                if ((clickSite >= 0) && (clickSite <= DNASequenceLength)) {                	VisibleGene vg = expressGene(DNA, clickSite);                	refreshDisplay(vg, clickSite);                    DNASequenceLength = vg.getGene().getDNASequenceLength();                    caretPosition = clickSite;                    headerLength = vg.getGene().getHeaderLength();                }  else {                    if (textPane.getCaretPosition() !=0) {                        textPane.setCaretPosition(0);                    }                }                            }        });                //allow editing of the gene        //  AGCT inserts DNA        //  agct replaces DNA        //  DELETE deletes DNA        textPane.addKeyListener(new KeyListener() {            public void keyTyped(KeyEvent e) {               String keyTyped = String.valueOf(e.getKeyChar());                if (keyTyped.equals("A")                   || keyTyped.equals("G")                   || keyTyped.equals("C")                   || keyTyped.equals("T") ) {                	previousProteinString = currentProteinString;                    StringBuffer workingDNAbuffer = new StringBuffer(DNA);                    workingDNAbuffer.insert(caretPosition, keyTyped);                    DNA = workingDNAbuffer.toString();                    caretPosition++;                    VisibleGene vg = expressGene(DNA, caretPosition);                    refreshDisplay(vg, caretPosition);                    currentProteinString = vg.getGene().getProteinString();                    DNASequenceLength = vg.getGene().getDNASequenceLength();                    headerLength = vg.getGene().getHeaderLength() + 1;                     //need the +1 otherwise, when you click on a base after moving + or -                    // the selected base is n+1 - why??                            }                if (keyTyped.equals("a")                   || keyTyped.equals("g")                   || keyTyped.equals("c")                   || keyTyped.equals("t") ) {                	previousProteinString = currentProteinString;                    StringBuffer workingDNAbuffer = new StringBuffer(DNA);                    workingDNAbuffer.replace(caretPosition,                                              caretPosition + 1,                                             keyTyped.toUpperCase());                    DNA = workingDNAbuffer.toString();                    VisibleGene vg = expressGene(DNA, caretPosition);                    refreshDisplay(vg, caretPosition);                    currentProteinString = vg.getGene().getProteinString();                    DNASequenceLength = vg.getGene().getDNASequenceLength();                    headerLength = vg.getGene().getHeaderLength() + 1;                     //need the +1 otherwise, when you click on a base after moving + or -                    // the selected base is n+1 - why??                            }                                if (e.getKeyChar() == '\b') {                	previousProteinString = currentProteinString;                    StringBuffer workingDNAbuffer = new StringBuffer(DNA);                    workingDNAbuffer.deleteCharAt(caretPosition);                    DNA = workingDNAbuffer.toString();                    if (caretPosition >= 0) {                        caretPosition--;                    }                    VisibleGene vg = expressGene(DNA, caretPosition);                    refreshDisplay(vg, caretPosition);                    currentProteinString = vg.getGene().getProteinString();                    DNASequenceLength = vg.getGene().getDNASequenceLength();                    headerLength = vg.getGene().getHeaderLength();                }                                if (keyTyped.equals("+") || keyTyped.equals("-")) {                    if (keyTyped.equals("+")) {                        caretPosition++;                        if (caretPosition > (DNA.length() - 1)) {                            caretPosition = DNA.length() - 1;                        }                    } else {                        caretPosition--;                        if (caretPosition < 0) {                            caretPosition = 0;                        }                    }                    VisibleGene vg = expressGene(DNA, caretPosition);                    refreshDisplay(vg, caretPosition);//                    previousProteinString = vg.getGene().getProteinString();                    DNASequenceLength = vg.getGene().getDNASequenceLength();                    headerLength = vg.getGene().getHeaderLength() + 1;                           //need the +1 otherwise, when you click on a base after moving + or -                    // the selected base is n+1 - why??                            }            }                        public void keyPressed(KeyEvent e) {            }                        public void keyReleased(KeyEvent e) {            }        });                //display the default DNA        resetButton.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                DNA = defaultDNA;        	    VisibleGene currentGene = expressGene(DNA, -1);        	    refreshDisplay(currentGene, -1);                currentProteinString = currentGene.getGene().getProteinString();        	    headerLength = currentGene.getGene().getHeaderLength();        	    DNASequenceLength = currentGene.getGene().getDNASequenceLength();         	    headerLength = currentGene.getGene().getHeaderLength();                       }        });                //allow the user to enter a sequence manually        newSequenceButton.addActionListener(new ActionListener() {            public void actionPerformed(ActionEvent e) {                String newDNA = (String)JOptionPane.showInputDialog(frame,                                         "Enter new DNA Sequence",                                         "New DNA Sequence",                                         JOptionPane.PLAIN_MESSAGE,                                         null, null, DNA);                if (newDNA == null) return;                previousProteinString = currentProteinString;                newDNA = newDNA.toUpperCase();                newDNA = newDNA.replaceAll("[^AGCT]","");                DNA = newDNA;                caretPosition = -1;        	    VisibleGene currentGene = expressGene(DNA, -1);        	    refreshDisplay(currentGene, -1);                currentProteinString = currentGene.getGene().getProteinString();        	    headerLength = currentGene.getGene().getHeaderLength();        	    DNASequenceLength = currentGene.getGene().getDNASequenceLength();          	    headerLength = currentGene.getGene().getHeaderLength();                      }        });	    	    //allow the user to add a caption at the bottom of the textPane	    addCaptionButton.addActionListener(new ActionListener() {	        public void actionPerformed(ActionEvent e) {	            caption = (String)JOptionPane.showInputDialog(frame,	                                     "Enter a Caption for this page.",	                                     "Caption:",	                                     JOptionPane.PLAIN_MESSAGE,	                                     null, null, caption);	            if (caption == null) return;        	    VisibleGene currentGene = expressGene(DNA, -1);        	    refreshDisplay(currentGene, -1);        	    headerLength = currentGene.getGene().getHeaderLength();        	    DNASequenceLength = currentGene.getGene().getDNASequenceLength();         	    headerLength = currentGene.getGene().getHeaderLength();           	            	        }	    });	            //print the textPane in color	    printButton.addActionListener(new ActionListener() {	        public void actionPerformed(ActionEvent e) {	            docRenderer.setScaleWidthToFit(true);	            HTMLDocument htdoc = (HTMLDocument)textPane.getDocument();	            docRenderer.print(htdoc);	        }	    });        //print the gene in black and white	    bwPrintButton.addActionListener(new ActionListener() {	        public void actionPerformed(ActionEvent e) {	            docRenderer.setScaleWidthToFit(true);	            JTextPane bwPane = new JTextPane();	            bwPane.setContentType("text/html");	            VisibleGene currentGene = expressGene(DNA, caretPosition);	            bwPane.setText(currentGene.getBwHTML() + "\n\n" + caption);	            HTMLDocument htdoc = (HTMLDocument)bwPane.getDocument();	            docRenderer.print(htdoc);	        }	    });        //display the help info	    helpButton.addActionListener(new ActionListener() {	        public void actionPerformed(ActionEvent e) {	            URL url = Genex.class.getResource("fig1.gif");	            ImageIcon pic = new ImageIcon(url);	            JOptionPane.showMessageDialog(frame,	                              "<html><body>"	                  + "Click the top strand of DNA to select a base.<br>"	                  + "Move <u>right</u> with +<br>"	                  + "Move <u>left</u> with -<br>"	                  + "<u>Delete</u> a base with the Delete Key (Mac).<br>"					  + "&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;" 					  + "(Backspace on Windows).<br>"                      + "<u>Insert</u> a base with AGCT.<br>"	                  + "<u>Replace</u> a base with agct.<br>"	                  + "</body></html>",	                              "Genex Help",	                              JOptionPane.PLAIN_MESSAGE,	                              pic);	        }	    });	                //display the about info	    aboutButton.addActionListener(new ActionListener() {	        public void actionPerformed(ActionEvent e) {	            JOptionPane.showMessageDialog(frame,	                              "<html><body>"	                  + "<center>Gene Explorer Version 1.2<br>"	                  + "<br>"	                  + "Brian White (2004)<br>"	                  + "brian.white@umb.edu"	                  + "</body></html>",	                              "About Genex",	                              JOptionPane.PLAIN_MESSAGE);	        }	    });	    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);	    frame.pack();	    frame.show();	    	    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();	    frame.setSize(screenSize.width, Math.round(screenSize.height*3/4));	    frame.setLocation(0,0);	    	    textPane.requestFocus();		}		static VisibleGene expressGene(String currentDNA, int selectedDNABase) {        	// set up the gene for transcription, etc.	    Gene currentGene = new Gene(currentDNA, promoterSequence, terminatorSequence,                                     intronStartSequence, intronEndSequence, polyATail);	        //process the gene before displaying it        currentGene.transcribe();        currentGene.process();        currentGene.translate();//        currentGene.showItAll();        //generate the html & return it        return new VisibleGene(currentGene.generateHTML(selectedDNABase), currentGene);    }    	static void refreshDisplay(VisibleGene vg, int selectedBase) {		if (selectedBase != -1) {            infoLabel.setText("Selected Base = " + selectedBase);		}  else {			infoLabel.setText("Selected Base = ");		}        textPane.setText(vg.getColorHTML()             + "<font color=blue>" + previousProteinString             + "</font></pre><br><br><br><font size=+1>" + caption             + "</font></body></html>");	}}