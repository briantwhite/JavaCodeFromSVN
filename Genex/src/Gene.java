//the class that does the gene expression logic// transcription, processing, and translation// also generates the HTML for displayimport java.util.*;public class Gene {    // specifications for processing    String promoterSequence;    String terminatorSequence;    String intronStartSequence;    String intronEndSequence;    String polyATail;        //note that all sequences start with 0 as the first member        //the starting DNA sequence for expression; this is not changed    // for displaying DNA, use DNASequence.length()    String DNASequence;        //the input DNA string is converted into this array list of individual nucleotides    // each nucleotide keeps info about what strands it is in, etc.    //  NOTE: this can be longer than DNASequence.length() IF the polyA tail extends    //    after the end of the DNA sequence.  So, for processing & display of mRNA & protein    //    DNANucleotides.size() should be used.    public ArrayList DNANucleotides;        //these are the sequences of the strands - all lack the leading & trailing whitespace    //  required for proper alignment    // the also do not include the 5'- etc labels    String premRNASequence;  //does not include poly A tail    String mRNASequence;    //the mature mRNA    String proteinSequence;        //these are important numerical values    //  some are calculated from the strings (as shown)    //  others are calculated as the gene is processed    int leaderLength;  //the number of DNA bases before the start of transcription    int promoterStart; //the number, in the DNA sequence, of the start of the promoter    int promoterLength;  //length of promoter sequence    int terminatorStart; //the number in the DNA sequence of the start of the terminator    int terminatorLength; //length of the terminator    int proteinStart;   // the first base, in the mRNA, of the start codon    int proteinEnd;     //the first base, in the mRNA, of the stop codon        int headerLength;  //# of chars (as actually displayed in the textPane, not                        // counting html tags) from start of text to first base of DNA                       // set by generateHTML()        //variables used in processing exons    int exonColor;      //a counter to cycle thru the 3 possible exon colors    ArrayList exons;    //a list of the exons in the gene    String proteinString;  //the protein sequence WITH leading whitespace for alignment                           // and N- & -C - used for the previous protein sequence display    public Gene(String inputDNASequence,                 String promoterSequence,                 String terminatorSequence,                 String intronStartSequence,                 String intronEndSequence,                 String polyATail) {    // constructor that sets up DNA strand & gene specs        DNANucleotides = new ArrayList();        DNASequence = inputDNASequence;        this.promoterSequence = promoterSequence;        this.terminatorSequence = terminatorSequence;        this.intronStartSequence = intronStartSequence;        this.intronEndSequence = intronEndSequence;        this.polyATail = polyATail;                promoterLength = promoterSequence.length();          terminatorLength = terminatorSequence.length();         leaderLength = 0;        promoterStart = -1;        terminatorStart = -1;        proteinStart = 0;        proteinEnd = 0;        exons = new ArrayList();        exonColor = 1;        proteinString = new String("");        //read in the gene        for (int i = 0; i < inputDNASequence.length(); i++) {            DNANucleotides.add(new Nucleotide(DNASequence.charAt(i), i ));        }    }        public void transcribe() {    	int promoterSite = DNASequence.indexOf(promoterSequence);	    int terminatorSite = DNASequence.indexOf(terminatorSequence, promoterSite);	    	    if ((promoterSite != -1) && (terminatorSite != -1)) {  // if we have a gene	        int mRNANucleotideNumber = 0;	        //set the values for this gene	        promoterStart = promoterSite;	        terminatorStart = terminatorSite;	        leaderLength = promoterStart + promoterLength;	        	        //mark nucleotides in the pre mRNA from promoter to terminator	        for (int i = leaderLength; i < terminatorSite; i++) {	            Nucleotide nucleotide = (Nucleotide)DNANucleotides.get(i);	            nucleotide.setInPremRNA();	            nucleotide.setPremRNABaseNum(mRNANucleotideNumber);	            mRNANucleotideNumber++;	        }	            	    //here, pre_mRNA buffer includes leading & trailing whitespace for	        // correct alignment with the DNA	        // count up to DNASequence.length() beacuse this is based on the DNA without the	        //    poly A tail	        StringBuffer pre_mRNAbuffer = new StringBuffer();	            for (int i = 0; i < DNASequence.length(); i++) {	               Nucleotide nucleotide = (Nucleotide)DNANucleotides.get(i);	               pre_mRNAbuffer.append(nucleotide.getRNABase());	            }	        //strip off leading & trailing whitespace	        premRNASequence = pre_mRNAbuffer.toString().trim();	    } else {	        premRNASequence = "";	    }    }        public void process() {        //only process if there's an mRNA        if (!premRNASequence.equals("")) {            int currentNucleotideNum = 0;  //start with first nuc in mRNA            StringBuffer mRNAbuffer = new StringBuffer();            int currentmRNABase = 0;                       while (currentNucleotideNum != -1) {                Exon currentExon = findNextExon(currentNucleotideNum);                exons.add(currentExon);                currentNucleotideNum = currentExon.getStartOfNext();                            //mark the nucleotides in the exons as being in mRNA                //and build up the mature mRNA sequence                for (int i = currentExon.getStart();                         i < currentExon.getEnd();                         i++) {                    Nucleotide nucleotide = (Nucleotide)DNANucleotides.get(i + leaderLength);                    nucleotide.setInmRNA();                    nucleotide.setmRNABaseNum(currentmRNABase);                    currentmRNABase++;                    mRNAbuffer.append(nucleotide.getRNABase());                }            }        	        //add on the poly A tail here	        for (int i = terminatorStart; i < (terminatorStart + polyATail.length()); i++) {	            //see if it's after the end of the gene	            if (i >= DNANucleotides.size()) {	                //if it is after the end, add another one	                Nucleotide nucleotide = new Nucleotide('A', i);                    //it's in the mRNA but not the pre mRNA	                nucleotide.setInmRNA();	                //if it is after the end of the DNA sequence, add a DNA Nucleotide                    DNANucleotides.add(nucleotide);	            } else {	                //mark it as in the mRNA but not the pre mRNA	                Nucleotide nucleotide = (Nucleotide)DNANucleotides.get(i);	                nucleotide.setInmRNA();	            }	        }           	        // add the poly A tail            mRNASequence = mRNAbuffer.toString() + polyATail;        } else {            // if no pre-mRNA, there's no mRNA            mRNASequence = "";        }    }        public Exon findNextExon(int currentPosition) {        //see if there's a start intron sequence up ahead        int startSite = premRNASequence.indexOf(intronStartSequence, currentPosition);                //if not, we're done        if (startSite == -1) return new Exon(currentPosition, premRNASequence.length(), -1);                //since there's a start, look for an end        int endSite = premRNASequence.indexOf(intronEndSequence, startSite);                //if not, we're done also        if (endSite == -1) return new Exon(currentPosition, premRNASequence.length(), -1);                //so we have an intron        // mark the exon & move on        return new Exon(currentPosition, startSite, endSite + intronEndSequence.length());    }        public void translate() {        //if no mRNA, no protein        if (!mRNASequence.equals("")) {            int aaNum = 0;              //the number of the amino acid in the sequence                                        // the stop codon has no number            int baseInCodon = 0;        //0 = first base; 1 = 2nd; 2 = third base in codon            int currentmRNABase = 0;    //number of base in mRNA strand            String currentAA = new String("");     //the amino acid            StringBuffer proteinBuffer = new StringBuffer();                   //look for start codon            for (int i = 0; i < DNANucleotides.size(); i++) {                Nucleotide base = (Nucleotide)DNANucleotides.get(i);                //find the next 3 mRNA bases (even looking across splice junctions)                if (base.getInmRNA()) {                    Nucleotide base1 = getNextmRNANucleotide(i);                    Nucleotide base2 = getNextmRNANucleotide(base1.getDNABaseNum() + 1);                    Nucleotide base3 = getNextmRNANucleotide(base2.getDNABaseNum() + 1);                    String codon = base1.getRNABase() + base2.getRNABase() + base3.getRNABase();                    currentmRNABase = base3.getDNABaseNum();                    if (codon.equals("AUG")) {                        //found it - now start translation                        setCodonValues(0, base1, base2, base3);                        proteinBuffer.append(Codon.getAA(codon));                        break;                    }                }             }            //now we're in a protein            int codonNum = 1;                //next codon            int j = (currentmRNABase + 1);   //next base            while (j <= DNANucleotides.size()) {                //get next codon                Nucleotide first = getNextmRNANucleotide(j);                Nucleotide second = getNextmRNANucleotide(first.getDNABaseNum() + 1);                Nucleotide third = getNextmRNANucleotide(second.getDNABaseNum() + 1);                String codon = first.getRNABase() + second.getRNABase() + third.getRNABase();                                //if we are going to read after end of mRNA, stop before doing so                if ((j + 2) >= DNANucleotides.size()) break;                                //point to next codon                j = third.getDNABaseNum() + 1;                                //get the amino acid for this codon                proteinBuffer.append(Codon.getAA(codon));                setCodonValues(codonNum, first, second, third);                                //see if stop codon aaNum = -2 if a stop codon (-1 means not in protein)                if (Codon.getAA(codon).equals("")) {                    setCodonValues(-2, first, second, third);                    break;                }                codonNum++;            }                              proteinSequence = proteinBuffer.toString();       } else {           //if no mRNA, no protein           proteinSequence = "";       }    }        public Nucleotide getNextmRNANucleotide(int DNABaseNum) {            //be sure it's not out of range        if (DNABaseNum >= DNANucleotides.size()) {            DNABaseNum = DNANucleotides.size() - 1;        }                //see if the current DNA base corresponds to a base in the mRNA        Nucleotide nucleotide = (Nucleotide)DNANucleotides.get(DNABaseNum);                // if not, then loop until you find one        while (!nucleotide.getInmRNA() && (DNABaseNum < DNANucleotides.size())) {            nucleotide = (Nucleotide)DNANucleotides.get(DNABaseNum);            DNABaseNum++;        }        return nucleotide;    }        //set the values for the Nucleotides in the codon    public void setCodonValues(int AANum, Nucleotide first, Nucleotide second, Nucleotide third) {        first.setInProtein();        first.setAANum(AANum);        first.setCodonPosition(0);        second.setInProtein();        second.setAANum(AANum);        second.setCodonPosition(1);        third.setInProtein();        third.setAANum(AANum);        third.setCodonPosition(2);    }        //for debugging only - list the specs on each nucleotide    public void showItAll() {        System.out.println("#\tDb\tRb\tpm\tm\tprot\taa\tcp\tsel");        for (int i = 0; i < DNANucleotides.size(); i++) {            Nucleotide nuc = (Nucleotide)DNANucleotides.get(i);            System.out.println(i + "\t" + nuc.getBase()                                 + "\t" + nuc.getRNABase()                                 + "\t" + convertBoolean(nuc.getInPremRNA())                                      + " " + nuc.getPremRNABaseNum()                                 + "\t" + convertBoolean(nuc.getInmRNA())                                     + " " + nuc.getmRNABaseNum()                                 + "\t" + convertBoolean(nuc.getInProtein())                                 + "\t" + nuc.getAANum()                                  + "\t" + nuc.getCodonPosition()                                 + "\t" + convertBoolean(nuc.getSelected()));        }    }        //used for showItAll    public String convertBoolean(boolean b) {        if (b) return "Y";        return "N";    }        //generate the html for display - after the gene has been expressed    // selectedBase is the base the user selected    //  in general, for each strand, read thru the sequence base-by-base and mark up as    //   you go along    public String generateHTML(int selectedDNABase) {        //mark the selected base (-1 means no base selected)        if (selectedDNABase != -1) {            Nucleotide nuc = (Nucleotide)DNANucleotides.get(selectedDNABase);            nuc.setSelected();        }                //the html header that sets up the styles for display        StringBuffer headerBuffer = new StringBuffer();                //the bufffer for the actual html	    StringBuffer HTMLbuffer = new StringBuffer();	            // start the html with the header         // keep the header separate to allow character counts to work	    headerBuffer.append("<html><head>");        headerBuffer.append("<style type=\"text/css\">");        headerBuffer.append("EM.selected {font-style: normal; background: blue; color: red}");        headerBuffer.append("EM.promoter {font-style: normal; background: #90FF90; color: black}");        headerBuffer.append("EM.terminator {font-style: normal; background: #FF9090; color: black}");        headerBuffer.append("EM.exon {font-style: normal; background: #FF90FF; color: black}");        headerBuffer.append("EM.next {font-style: normal; background: #90FFFF; color: black}");        headerBuffer.append("EM.another {font-style: normal; background: #FFFF50; color: black}");        headerBuffer.append("</style></head><body>");                headerBuffer.append("<h3>DNA: <EM class=promoter>Promoter</EM>");        headerBuffer.append("<EM class=terminator>Terminator</EM></h3><pre>");        	    // then, set up the DNA numbering bars	    //insert some blank spaces for the "5'-"	    HTMLbuffer.append("     ");	    	    //first the numbers	    for (int i = 0; i < DNASequence.length(); i = i + 10) {	        if (i == 0) {	            HTMLbuffer.append("");	        } else  if (i < 100 ){	            HTMLbuffer.append("        " + i);   	        } else {	            HTMLbuffer.append("       " + i);	        }	    }	    HTMLbuffer.append("\n");	    	    //then the tick marks	    HTMLbuffer.append("    ");	    for (int i = 0; i < DNASequence.length(); i = i + 10) {	        if (i > 0) {	            HTMLbuffer.append("    .    |");	        }	    }	    HTMLbuffer.append("\n");	    	    // then the top strand of DNA	    HTMLbuffer.append("5\'-");	    headerLength = HTMLbuffer.length() + 26;  // add on length of "DNA: promoter terminator" & "5'-"	    	    //add in the header	    HTMLbuffer.insert(0, headerBuffer.toString());	    	    //the top strand, with promoter, terminator, & selected base marked        for (int i = 0; i < DNASequence.length(); i++) {            Nucleotide n = (Nucleotide)DNANucleotides.get(i);            if (i == promoterStart) {                HTMLbuffer.append("<EM class=promoter>");            }                        if (i == promoterStart + promoterLength) {                HTMLbuffer.append("</EM>");            }                        if (i == terminatorStart) {                HTMLbuffer.append("<EM class=terminator>");            }                        if (i == terminatorStart + terminatorLength) {                HTMLbuffer.append("</EM>");            }                        if (n.getSelected()) {                HTMLbuffer.append("<EM class=selected>");                HTMLbuffer.append(n.getBase());                HTMLbuffer.append("</EM>");            } else {                HTMLbuffer.append(n.getBase());            }        }	          HTMLbuffer.append("</EM>-3\'\n");     //the added </b> is if the last base                                              //  is the end of the terminator                //then the base-pairs, with promoter, terminator, and selected base marked        HTMLbuffer.append("   ");        for (int i = 0; i < DNASequence.length(); i++) {            Nucleotide n = (Nucleotide)DNANucleotides.get(i);            if (i == promoterStart) {                HTMLbuffer.append("<EM class=promoter>");            }                        if (i == promoterStart + promoterLength) {                HTMLbuffer.append("</EM>");            }                        if (i == terminatorStart) {                HTMLbuffer.append("<EM class=terminator>");            }                        if (i == terminatorStart + terminatorLength) {                HTMLbuffer.append("</EM>");            }                        if (n.getSelected()) {                HTMLbuffer.append("<EM class=selected>");                HTMLbuffer.append("|");                HTMLbuffer.append("</EM>");            } else {                HTMLbuffer.append("|");            }        }	          HTMLbuffer.append("</EM>\n");     //the added </b> is if the last base                                              //  is the end of the terminator                //then the bottom strand with promoter, terminator, and selected base marked	    HTMLbuffer.append("3\'-");        for (int i = 0; i < DNASequence.length(); i++) {            Nucleotide n = (Nucleotide)DNANucleotides.get(i);            if (i == promoterStart) {                HTMLbuffer.append("<EM class=promoter>");            }                        if (i == promoterStart + promoterLength) {                HTMLbuffer.append("</EM>");            }                        if (i == terminatorStart) {                HTMLbuffer.append("<EM class=terminator>");            }                        if (i == terminatorStart + terminatorLength) {                HTMLbuffer.append("</EM>");            }                        if (n.getSelected()) {                HTMLbuffer.append("<EM class=selected>");                HTMLbuffer.append(n.getComplementBase());                HTMLbuffer.append("</EM>");            } else {                HTMLbuffer.append(n.getComplementBase());            }        }	          HTMLbuffer.append("</EM>-5\'\n");     //the added </b> is if the last base                                              //  is the end of the terminator        //see if a prokaryote        if (!(intronStartSequence.equals("none") || intronEndSequence.equals("none"))) {    	    //then the label for the pre-mRNA	        HTMLbuffer.append("</pre><h3>pre-mRNA: <EM class=exon>Ex</EM><EM class=next>o</EM>"	                          + "<EM class=another>n</EM> Intron</h3><pre>");            //then the pre mRNA            //first the leading spaces            if (!premRNASequence.equals("")) {                for (int i = 0; i < leaderLength; i++ ) {                    HTMLbuffer.append(" ");                }                HTMLbuffer.append("5\'-");	                             //print out bases and mark exons as you go                 exonColor = 1;                for (int i = 0; i < DNASequence.length(); i++) {                    //get this & the previous nucleotide                    Nucleotide current = (Nucleotide)DNANucleotides.get(i);                    Nucleotide prev;                    if (i != 0) {                        prev = (Nucleotide)DNANucleotides.get(i - 1);                    } else {                        prev = (Nucleotide)DNANucleotides.get(i);                    }                            //see if it's in the pre mRNA                    if (current.getInPremRNA()) {                        //see if start of exon                        if (!prev.getInmRNA() && current.getInmRNA()) {                            HTMLbuffer.append("<EM class=" + getExonColor() + ">");                        }                                            //see if end of exon                        if (prev.getInmRNA() && !current.getInmRNA()) {                             HTMLbuffer.append("</EM>");                        }                                              //see if selected                        if (current.getSelected()) {                            HTMLbuffer.append("<EM class=selected>");                            HTMLbuffer.append(current.getRNABase());                            HTMLbuffer.append("</EM>");                        } else {                            HTMLbuffer.append(current.getRNABase());                        }                    }                }	            HTMLbuffer.append("</EM>-3\'\n");    //needs the </b> for the end of the last exon	        } else {	            HTMLbuffer.append("<font color=red>none</font>\n");	        }	    }	    	    //then the label for the mature mRNA & the protein	    HTMLbuffer.append("</pre><h3>");	    if (!(intronStartSequence.equals("none") || intronEndSequence.equals("none"))) {	        HTMLbuffer.append("mature-");	    }	    HTMLbuffer.append("mRNA and Protein (<font color=blue>previous</font>):</h3><pre>");	    	    //if it's a prokaryote, add the leading spaces	    if (intronStartSequence.equals("none") || intronEndSequence.equals("none")) {	        for (int i = 0; i < leaderLength; i++ ) {	            HTMLbuffer.append(" ");	        }	    }	    	    //then the mature mRNA itself with exons, start, & stop codons marked	    if (!mRNASequence.equals("")) {    	    HTMLbuffer.append("5\'-");	        exonColor = 1;            for (int i = 0; i < DNANucleotides.size(); i++) {                //get this & the previous nucleotide                Nucleotide current = (Nucleotide)DNANucleotides.get(i);                Nucleotide prev;                if (i != 0) {                    prev = (Nucleotide)DNANucleotides.get(i - 1);                } else {                    prev = (Nucleotide)DNANucleotides.get(i);                }                        //see if it's in the mRNA and the pre mRNA (to avoid the poly A tail)                if (current.getInmRNA()) {                    //see if start of exon                    if (!prev.getInmRNA() && current.getInmRNA()) {                        HTMLbuffer.append("<EM class=" + getExonColor() + ">");                    }                                      //see if end of exon                    if (prev.getInmRNA() && !current.getInmRNA()) {                        HTMLbuffer.append("</EM>");                    }                                    //see if end of last exon (start of poly A)                    if (!current.getInPremRNA() && current.getInmRNA()) {                        //need to add </b> for each exon                        for (int x = 0; x < exons.size(); x++) {                            HTMLbuffer.append("</EM>");                        }                    }                                    //see if start of start or stop codon                    if (((current.getAANum() == 0) || (current.getAANum() == -2))                           && ((current.getCodonPosition() == 0) && (current.getInPremRNA()))) {                        HTMLbuffer.append("<u>");                    }                                    //see is end of start codon                    if ((current.getAANum() == 1) && (current.getCodonPosition() == 0)) {                         HTMLbuffer.append("</u>");                    }                                    //see if end of stop codon                    if ((current.getAANum() == -1) && (prev.getAANum() == -2)) {                        HTMLbuffer.append("</u>");                     }                                    //see if selected (& in pre mRNA - to avoid selecting poly A tail)                    if (current.getSelected() && current.getInPremRNA()) {                        HTMLbuffer.append("<EM class=selected>");                        HTMLbuffer.append(current.getRNABase());                        HTMLbuffer.append("</EM>");                    } else {                        HTMLbuffer.append(current.getRNABase());                    }                 }            }	        HTMLbuffer.append("</EM>-3\'\n");    //needs the </b> for the end of the last exon	    } else {	        HTMLbuffer.append("<font color=red>none</font>\n");	    }	    	    //then the protein itself	    // first, the leader	    // do it as a separate buffer	    StringBuffer proteinStringBuffer = new StringBuffer();	    	    //if a prokaryote, need more leader to align with top DNA	    if (intronStartSequence.equals("none") || intronEndSequence.equals("none")) {	        for (int i = 0; i < leaderLength; i++ ) {	            proteinStringBuffer.append(" ");	        }	    }	    if (!proteinSequence.equals("")) {    	    for (int i = 0; i < DNASequence.length(); i++) {	            Nucleotide n = (Nucleotide)DNANucleotides.get(i);	            if (n.getInmRNA()) {	                if (n.getAANum() == 0) {	                    break;	                }	                proteinStringBuffer.append(" ");	            }	        }	        proteinStringBuffer.append(" N-");	    	        if (selectedDNABase != -1) {        	    //mark the selected amino acid	            // do this by marking up the protein sequence string	            StringBuffer proteinBuffer = new StringBuffer(proteinSequence);	            Nucleotide n = (Nucleotide)DNANucleotides.get(selectedDNABase);	    	            //see if it is in an amino acid	            if (n.getAANum() >= 0) {            	    //first, the end of the selected AA	                proteinBuffer = proteinBuffer.insert(((n.getAANum() * 3) + 3), "</EM>");	                //then, the end of the part of the codon	                proteinBuffer = proteinBuffer.insert(((n.getAANum() * 3) + n.getCodonPosition() + 1), "</u>");	                //then, the start of the psrt of the codon	                proteinBuffer = proteinBuffer.insert(((n.getAANum() * 3) + n.getCodonPosition()), "<u>");	                //then the start	                proteinBuffer = proteinBuffer.insert((n.getAANum() * 3), "<EM class=selected>");	            }	            proteinStringBuffer.append(proteinBuffer.toString() + "-C");            } else {	            proteinStringBuffer.append(proteinSequence + "-C");	        }	    } else {	        proteinStringBuffer.append("<font color=red>none</font>\n");	    }	    proteinString = proteinStringBuffer.toString();	    HTMLbuffer.append(proteinString + "\n");	    	// finish up the html	    return HTMLbuffer.toString();	}		//cycle thru the three possible exon colors    public String getExonColor() {        switch (exonColor) {            case 1:                exonColor++;                return "exon";            case 2:                exonColor++;                return "next";            case 3:                exonColor = 1;                return "another";            }        return "";    }        public int getHeaderLength() {        return headerLength;    }        public int getDNASequenceLength() {        return DNASequence.length();    }        //remove html tags from protein string so it can be displayed as previous sequence    public String getProteinString() {        String s = new String(proteinString);        s = s.replaceAll("<EM class=selected>", "");        s = s.replaceAll("</EM>","");        s = s.replaceAll("<u>","");        return s.replaceAll("</u>", "");    }    }