2/20/11
loaded code from Freeland's thesis appendix I.doc
try to get it into svn

some changes from his thesis

1) in thesis, the file is set_up.c; in main.c, it is setup.c
	edited main.c to read "set_up.c"
2) in thesis, the file is codon.h; in main.c it is codons.c
	edited main.c to read "codon.c"
3) in thesis, there is no optimize.c
	but the file on pages xlvi and xlvii labeled with duplicate "n_samples.c"
	has the functions listed on page xvii as being in optimize.c
	so made optimize.c = the contents of pages xlvi & xlvii
	
2/21/11
more fixes
mut_calc.c line 110 is missing the function name and first few chars
using info on page xvi, add "void Build_Mutant_Array(SETTINGS_TYPE*"

try building by going into directory and
gcc main.c -o gen_code

some warnings, but no errors

tried to run it
need auxiliary files
made:
	a_acid_f.txt (based on fig 1i)
	PAM74100.txt (used OCR www.free-ocr.com on fig 1i)
	matrix_f.cod (using p xxvii and xxvii, it looks like UUU PHE)
		try this anyway..

seems to work aok!

2/25/11
added to 1_sample.c to print code specification and MS(0) to stdout
works
need to rearrange order to match the excel layout

3/1/11
1_sample.c now saves codes to codes.csv
	this can be read by r

add variance calc to 1_sample.c

now prints both

1/17/12
discrepancy between MS0 values calculated by excel and by this
(see Square Evolution Log 03.docx pages 28-33)
fixed by initializing num_stored_ptr to = 0 (not -1) in mut_calc.c's Build_Mutant_Array
line 113

now seems to log all mutations properly and give correct values

1/18/12
fixed code in mut_calc.c so that it is unambiguous (see Square Evolution Log 03 page 33)
tested AOK

3/4/15
imported into eclipse as a C++ project 

edited 1_sample.c to print out codon assignments in correct order for MS0 calculating 
excel spreadsheet
made gen_code_test that does this

need to calculate averagePR for each code and print it out
do this in 1_sample.c

tried this
  int x;
  float totalPR;
  totalPR = 0.0f;
  for (x = 1; x < 21; x++) {
	  totalPR = totalPR + acid_array[x].parameter * numCodons[x];
	  printf("x=%d %s %3.5f x %d\n", x, acid_array[x].name, acid_array[x].parameter, numCodons[x]);
  }
  float avgPR = totalPR/(float)61;

  got this
  x=2 SER 1.00000 x 6
x=3 TYR 2.00000 x 2
x=4 CYS 3.00000 x 2
x=5 TRP 4.00000 x 1
x=6 LEU 5.00000 x 6
x=7 PRO 6.00000 x 4
x=8 HIS 7.00000 x 2
x=9 GLN 8.00000 x 2
x=10 ARG 9.00000 x 6
x=11 ILE 10.00000 x 3
x=12 MET 11.00000 x 1
x=13 THR 12.00000 x 4
x=14 ASN 13.00000 x 2
x=15 LYS 14.00000 x 2
x=16 VAL 15.00000 x 4
x=17 ALA 16.00000 x 4
x=18 ASP 17.00000 x 2
x=19 GLU 18.00000 x 2
x=20 GLY 19.00000 x 4

it's just using the index of the aa for the "parameter" not the PR
need to figure out how to get this  - can either read a_acid_f.c as in in_out.c

in in_out.c - it first reads the PR into acid_array[x].parameter
	but then, later changes it to just the index
so, create another field in codon.h's Acid_Struct
	float PR
	read these in and don't change them in in_out.c
	use them in 1_sample.c
	need to copy the PR values properly in shuffle.c

works - compared results to first few codes - but see note below!

NOTE: the random number generator does not use a random seed so it always generates the same sequence of codes.
the seed is in random.c - called "idum"
to get Freeland's set of codes, use -317

could set this manually each time or write the code to use time to set it pseudo-randomly or 
http://stackoverflow.com/questions/822323/how-to-generate-a-random-number-in-c
try to use the built-in randomizer.

use the built in randomizer
in main.c add the includes and the srand
it's only used in one place in shuffle.c (line 37)
works! (new codes each run)
