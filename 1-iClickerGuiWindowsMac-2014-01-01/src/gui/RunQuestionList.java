package gui;

import gui.enumoption.EnumCorrectAnswer;
import gui.enumoption.EnumQuestionListState;

import java.util.ArrayList;
import java.util.Vector;

import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;

import app.Test;

import content.ListQuestion;
import content.QuestionBody;

/**
 * Small frame show all list questions when providing 
 * @author Junhao
 */
@SuppressWarnings("serial")
public class RunQuestionList extends javax.swing.JFrame {

    /**
     * Creates new form RunQuestionList
     */
    public RunQuestionList(Test test) {
    	this.test = test;
    	this.enumQuestionListState = EnumQuestionListState.PAUSE;
    	initComponents();
    	
    	this.setLocation(10, 100);
	}

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
    	
        jLabelSelectQuestion = new javax.swing.JLabel();
        jLabelAnswer = new javax.swing.JLabel();
        jTextFieldAnswer = new javax.swing.JTextField();
        jComboBoxSelectQuestion = new javax.swing.JComboBox<String> ();
        jCheckBoxAutoAdvance = new javax.swing.JCheckBox();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });
        
        this.setResizable(false);
        this.setTitle("Question List");
        
        jLabelSelectQuestion.setText("Select Question:");

        jLabelAnswer.setText("Answer:");

        jTextFieldAnswer.setColumns(1);
        jTextFieldAnswer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextFieldAnswerKeyTyped(evt);
            }
        });

        jComboBoxSelectQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxSelectQuestionActionPerformed(evt);
            }
        });

        jCheckBoxAutoAdvance.setText("Auto-advance");
        jCheckBoxAutoAdvance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAutoAdvanceActionPerformed(evt);
            }
        });
        
        jCheckBoxAutoAdvance.setVisible(false);
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabelAnswer)
                    .addComponent(jLabelSelectQuestion))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxSelectQuestion, 0, 343, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jCheckBoxAutoAdvance)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelSelectQuestion)
                    .addComponent(jComboBoxSelectQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelAnswer)
                    .addComponent(jTextFieldAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxAutoAdvance))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();

    }// </editor-fold>

    private void jTextFieldAnswerKeyTyped(java.awt.event.KeyEvent evt) {
        // TODO add your handling code here:
    }

    private void jCheckBoxAutoAdvanceActionPerformed(java.awt.event.ActionEvent evt) {
    	if (this.jCheckBoxAutoAdvance.isSelected()) {
    		this.enumQuestionListState = EnumQuestionListState.PLAY;
    	} else {
    		this.enumQuestionListState = EnumQuestionListState.PAUSE;
    	}
    }
    
    private void jComboBoxSelectQuestionActionPerformed(java.awt.event.ActionEvent evt) {
    	this.setAnswer();
    }

    private void formWindowClosed(java.awt.event.WindowEvent evt) {
    	this.enumQuestionListState = EnumQuestionListState.PAUSE;
    }
    
    /**
     * Load question list and fill them in the combo box.
     * @param listQuestions list questions.
     */
    public void loadListQuestion() {
    	ArrayList<ListQuestion> listQuestions = this.test.getCourse().getListQuestions();
    	
    	Vector<String> comboBoxItems = new Vector<String> ();
    	for (int i = 0; i < listQuestions.size(); i++) {
    		comboBoxItems.add(listQuestions.get(i).getTitle() + " (" + i + " of " + listQuestions.size() + ")");
    	}
    	ComboBoxModel<String> model = new DefaultComboBoxModel<String> (comboBoxItems);
    	this.jComboBoxSelectQuestion.setModel(model);
    	
    	this.jComboBoxSelectQuestion.setSelectedIndex(listQuestions.size() == 0 ? -1 : 0);
    	
    	this.setAnswer();
    	
    	this.jCheckBoxAutoAdvance.setSelected(true);
    }
    
    /**
     * Set the selected question and its correct answer.
     */
    public void setAnswer() {
    	if (this.jComboBoxSelectQuestion.getItemCount() == 0) {
    		this.jTextFieldAnswer.setText("");
    	} else {
    		EnumCorrectAnswer enumCorrectAnswer = this.test.getCourse().getListQuestion(this.jComboBoxSelectQuestion.getSelectedIndex()).getEnumCorrectAnswer();
    		this.jTextFieldAnswer.setText(enumCorrectAnswer == EnumCorrectAnswer.NA ? "" : enumCorrectAnswer.toString());
    	}
    }
    
    /**
     * Jump to the next question.
     */
    public void nextQuestion() {
    	int index = this.jComboBoxSelectQuestion.getSelectedIndex();
    	if (index < this.jComboBoxSelectQuestion.getItemCount() - 1) {
    		this.jComboBoxSelectQuestion.setSelectedIndex(index + 1);
    	}
    }
    
    public QuestionBody fetchQuestion() {
    	if (this.enumQuestionListState == EnumQuestionListState.PLAY) {
    		if (this.jComboBoxSelectQuestion.getSelectedIndex() == this.jComboBoxSelectQuestion.getItemCount() - 1) {
    			this.enumQuestionListState = EnumQuestionListState.PAUSE;
    		}
    		
    		return new ListQuestion(this.test.getCourse().getListQuestion(this.jComboBoxSelectQuestion.getSelectedIndex()));
    	} else {
    		return null;
    	}
    }
    
    public EnumQuestionListState getEnumQuestionListState() {
		return enumQuestionListState;
	}

	public void setEnumQuestionListState(EnumQuestionListState enumQuestionListState) {
		this.enumQuestionListState = enumQuestionListState;
	}

	Test test;
    
    private EnumQuestionListState enumQuestionListState;
    
	// Variables declaration - do not modify
    private javax.swing.JComboBox<String> jComboBoxSelectQuestion;
    private javax.swing.JLabel jLabelAnswer;
    private javax.swing.JLabel jLabelSelectQuestion;
    private javax.swing.JTextField jTextFieldAnswer;
    private javax.swing.JCheckBox jCheckBoxAutoAdvance;
    // End of variables declaration
}
