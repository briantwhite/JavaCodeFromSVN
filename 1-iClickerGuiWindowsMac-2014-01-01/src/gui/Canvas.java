package gui;

import gui.enumoption.EnumChartType;
import gui.enumoption.EnumCorrectAnswer;
import gui.enumoption.EnumUserGroup;

import java.awt.*;
import java.util.ArrayList;

import content.LabInfoList;
import content.Question;
import content.enumoption.HistogramDisplayOption;

import app.Test;


/**
 * Draw chart.
 * @author Junhao
 * 
 */
@SuppressWarnings("serial")
public class Canvas extends javax.swing.JPanel {

    /**
     * Creates new form Canvas
     */
    public Canvas(Test test, Histogram histogram) {
        initComponents();
        this.test = test;
        this.histogram = histogram;
    }

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(400, 400));
        setMinimumSize(new java.awt.Dimension(400, 400));
        setPreferredSize(new java.awt.Dimension(400, 400));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public void paintComponent(Graphics g) {
    	super.paintComponent(g);
    	
    	if (this.histogram.getUserGroup() == EnumUserGroup.ALL) {
    		paintMix(g);
    	} else {
    		paintLabVertical(g);
    	}
    }
    
    /**
     * Paint while users are divided by votes.
     * @param g
     */
    private void paintMix(Graphics g) {
    	ArrayList<Color> colors = this.test.getChoiceColor().getColorByAnswer(
    			this.histogram.question == null ? EnumCorrectAnswer.NA : this.histogram.question.getCorrectAnswer(), 
    			this.histogram.getHistogramDisplayOption());
    	
    	if (this.histogram.getChartType() == EnumChartType.BARVERTICAL) {
    		paintVertical(g, colors.get(0), colors.get(1), colors.get(2), colors.get(3), colors.get(4));
    	}
    	else if (this.histogram.getChartType() == EnumChartType.BARHORIZONTAL) {
    		paintHorizontal(g, colors.get(0), colors.get(1), colors.get(2), colors.get(3), colors.get(4));
    	}
    	else {
    		paintPie(g, colors.get(0), colors.get(1), colors.get(2), colors.get(3), colors.get(4));
    	}
    }
    
    private void paintVertical(Graphics g, Color colorA, Color colorB, Color colorC, Color colorD, Color colorE) {
        Question question = this.histogram.question;
    	
        int amountA = 0;
        int amountB = 0;
        int amountC = 0;
        int amountD = 0;
        int amountE = 0;
        
        double percentA = 0;
        double percentB = 0;
        double percentC = 0;
        double percentD = 0;
        double percentE = 0;
    	
        if (question != null) {
            amountA = question.getResponseAAmont();
            amountB = question.getResponseBAmont();
            amountC = question.getResponseCAmont();
            amountD = question.getResponseDAmont();
            amountE = question.getResponseEAmont();
            
            percentA = question.getResponseAPercent();
            percentB = question.getResponseBPercent();
            percentC = question.getResponseCPercent();
            percentD = question.getResponseDPercent();
            percentE = question.getResponseEPercent();	
        }
        
    	int canvasWidth = this.getWidth();
        int canvasHeight = this.getHeight();
        
        int axisXLength = (int)(canvasWidth * 0.9);
        int axisYLength = (int)(canvasHeight * 0.8);
        
        int barSectionWidth = (int)(axisXLength * 0.2);
        int barWidth = (int)(barSectionWidth * 0.8);

        int maxAmount = Math.max(amountA, amountB);
        maxAmount = Math.max(maxAmount, amountC);
        maxAmount = Math.max(maxAmount, amountD);
        maxAmount = Math.max(maxAmount, amountE);
        
        int barHeightA = (int)((double)axisYLength / (maxAmount + 1) * amountA);
        int barHeightB = (int)((double)axisYLength / (maxAmount + 1) * amountB);
        int barHeightC = (int)((double)axisYLength / (maxAmount + 1) * amountC);
        int barHeightD = (int)((double)axisYLength / (maxAmount + 1) * amountD);
        int barHeightE = (int)((double)axisYLength / (maxAmount + 1) * amountE);
        
        int originX = (int)((canvasWidth  - axisXLength) / 2);
        int originY = (int)((canvasHeight - axisYLength) / 2 + axisYLength);
        
        // X axis
        g.drawLine(originX, originY, originX + axisXLength, originY);
        
        // Label separating segments on X axis
        g.drawLine(originX + barSectionWidth * 1, originY, originX + barSectionWidth * 1, originY + 5);
        g.drawLine(originX + barSectionWidth * 2, originY, originX + barSectionWidth * 2, originY + 5);
        g.drawLine(originX + barSectionWidth * 3, originY, originX + barSectionWidth * 3, originY + 5);
        g.drawLine(originX + barSectionWidth * 4, originY, originX + barSectionWidth * 4, originY + 5);
        
        // Y axis
        g.drawLine(originX, originY, originX, originY - axisYLength);
        
        // Choices
        g.drawString("A", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 0), originY + 20);
        g.drawString("B", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 1), originY + 20);
        g.drawString("C", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 2), originY + 20);
        g.drawString("D", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 3), originY + 20);
        g.drawString("E", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 4), originY + 20);
        
        // Amount and percentage
        g.drawString(amountA + "(" + (int)percentA + "%)", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 0 - 20), originY - barHeightA - 20);
        g.drawString(amountB + "(" + (int)percentB + "%)", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 1 - 20), originY - barHeightB - 20);
        g.drawString(amountC + "(" + (int)percentC + "%)", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 2 - 20), originY - barHeightC - 20);
        g.drawString(amountD + "(" + (int)percentD + "%)", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 3 - 20), originY - barHeightD - 20);
        g.drawString(amountE + "(" + (int)percentE + "%)", (int)((originX + originX + barSectionWidth) / 2 + barSectionWidth * 4 - 20), originY - barHeightE - 20);
        
        // Histogram
        int temp = originX + (int)((barSectionWidth - barWidth) / 2);
        g.drawLine(temp,            originY - 1,          temp,            originY - barHeightA);
        g.drawLine(temp,            originY - barHeightA, temp + barWidth, originY - barHeightA);
        g.drawLine(temp + barWidth, originY - barHeightA, temp + barWidth, originY - 1);
        g.setColor(colorA);
        g.fillRect(temp + 1, originY - barHeightA + 1, barWidth - 1, barHeightA - 1);
        
        g.setColor(Color.BLACK);
        temp += barSectionWidth;
        g.drawLine(temp,            originY - 1,          temp,            originY - barHeightB);
        g.drawLine(temp,            originY - barHeightB, temp + barWidth, originY - barHeightB);
        g.drawLine(temp + barWidth, originY - barHeightB, temp + barWidth, originY - 1);
        g.setColor(colorB);
        g.fillRect(temp + 1, originY - barHeightB + 1, barWidth - 1, barHeightB - 1);
        
        g.setColor(Color.BLACK);
        temp += barSectionWidth;
        g.drawLine(temp,            originY -1,          temp,            originY - barHeightC);
        g.drawLine(temp,            originY - barHeightC, temp + barWidth, originY - barHeightC);
        g.drawLine(temp + barWidth, originY - barHeightC, temp + barWidth, originY - 1);  
        g.setColor(colorC);
        g.fillRect(temp + 1, originY - barHeightC + 1, barWidth - 1, barHeightC - 1);
        
        g.setColor(Color.BLACK);
        temp += barSectionWidth;
        g.drawLine(temp,            originY - 1,          temp,            originY - barHeightD);
        g.drawLine(temp,            originY - barHeightD, temp + barWidth, originY - barHeightD);
        g.drawLine(temp + barWidth, originY - barHeightD, temp + barWidth, originY - 1);  
        g.setColor(colorD);
        g.fillRect(temp + 1, originY - barHeightD + 1, barWidth - 1, barHeightD - 1);
        
        g.setColor(Color.BLACK);
        temp += barSectionWidth;
        g.drawLine(temp,            originY - 1,          temp,            originY - barHeightE);
        g.drawLine(temp,            originY - barHeightE, temp + barWidth, originY - barHeightE);
        g.drawLine(temp + barWidth, originY - barHeightE, temp + barWidth, originY - 1);  
        g.setColor(colorE);
        g.fillRect(temp + 1, originY - barHeightE + 1, barWidth - 1, barHeightE - 1);
    }
    
    private void paintHorizontal(Graphics g, Color colorA, Color colorB, Color colorC, Color colorD, Color colorE) {
    	Question question = this.histogram.question;
        
        int amountA = 0;
        int amountB = 0;
        int amountC = 0;
        int amountD = 0;
        int amountE = 0;
        
        double percentA = 0;
        double percentB = 0;
        double percentC = 0;
        double percentD = 0;
        double percentE = 0;
    	
        if (question != null) {
            amountA = question.getResponseAAmont();
            amountB = question.getResponseBAmont();
            amountC = question.getResponseCAmont();
            amountD = question.getResponseDAmont();
            amountE = question.getResponseEAmont();
            
            percentA = question.getResponseAPercent();
            percentB = question.getResponseBPercent();
            percentC = question.getResponseCPercent();
            percentD = question.getResponseDPercent();
            percentE = question.getResponseEPercent();	
        }
    	
    	int canvasWidth = this.getWidth();
        int canvasHeight = this.getHeight();
        
        int axisXLength = (int)(canvasWidth * 0.9);
        int axisYLength = (int)(canvasHeight * 0.8);
        
        int barSectionWidth = (int)(axisYLength * 0.2);
        int barWidth = (int)(barSectionWidth * 0.8);

        int maxAmount = Math.max(amountA, amountB);
        maxAmount = Math.max(maxAmount, amountC);
        maxAmount = Math.max(maxAmount, amountD);
        maxAmount = Math.max(maxAmount, amountE);
        
        int barHeightA = (int)((double)axisXLength / (maxAmount + 1) * amountA);
        int barHeightB = (int)((double)axisXLength / (maxAmount + 1) * amountB);
        int barHeightC = (int)((double)axisXLength / (maxAmount + 1) * amountC);
        int barHeightD = (int)((double)axisXLength / (maxAmount + 1) * amountD);
        int barHeightE = (int)((double)axisXLength / (maxAmount + 1) * amountE);
        
        int originX = (int)((canvasWidth  - axisXLength) / 2);
        int originY = (int)((canvasHeight - axisYLength) / 2 + axisYLength);
        
        // X axis
        g.drawLine(originX, originY, originX + axisXLength, originY);
        
        // Label separating segments on X axis
        g.drawLine(originX, originY - barSectionWidth * 1, originX - 5, originY - barSectionWidth * 1);
        g.drawLine(originX, originY - barSectionWidth * 2, originX - 5, originY - barSectionWidth * 2);
        g.drawLine(originX, originY - barSectionWidth * 3, originX - 5, originY - barSectionWidth * 3);
        g.drawLine(originX, originY - barSectionWidth * 4, originX - 5, originY - barSectionWidth * 4);
        
        // Y axis
        g.drawLine(originX, originY, originX, originY - axisYLength);
        
        // Choices
        g.drawString("A", originX - 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 4));
        g.drawString("B", originX - 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 3));
        g.drawString("C", originX - 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 2));
        g.drawString("D", originX - 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 1));
        g.drawString("E", originX - 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 0));
        
        // Amount and percentage
        g.drawString(amountA + "(" + (int)percentA + "%)", originX + barHeightA + 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 4 + 20));
        g.drawString(amountB + "(" + (int)percentB + "%)", originX + barHeightB + 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 3 + 20));
        g.drawString(amountC + "(" + (int)percentC + "%)", originX + barHeightC + 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 2 + 20));
        g.drawString(amountD + "(" + (int)percentD + "%)", originX + barHeightD + 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 1 + 20));
        g.drawString(amountE + "(" + (int)percentE + "%)", originX + barHeightE + 20, (int)((originY + originY - barSectionWidth) / 2 - barSectionWidth * 0 + 20));
        
        // Histogram
        int temp = originY - axisYLength + (int)((barSectionWidth - barWidth) / 2);
        g.drawLine(originX + 0, temp, originX + barHeightA, temp);
        g.drawLine(originX + barHeightA, temp, originX + barHeightA, temp + barWidth);
        g.drawLine(originX + barHeightA, temp + barWidth, originX, temp + barWidth);
        g.setColor(colorA);
        g.fillRect(originX + 1, temp + 1, barHeightA - 1, barWidth - 1);
        
        g.setColor(Color.BLACK);
        temp += barSectionWidth;
        g.drawLine(originX + 0, temp, originX + barHeightB, temp);
        g.drawLine(originX + barHeightB, temp, originX + barHeightB, temp + barWidth);
        g.drawLine(originX + barHeightB, temp + barWidth, originX, temp + barWidth);
        g.setColor(colorB);
        g.fillRect(originX + 1, temp + 1, barHeightB - 1, barWidth - 1);

        g.setColor(Color.BLACK);
        temp += barSectionWidth;
        g.drawLine(originX + 0, temp, originX + barHeightC, temp);
        g.drawLine(originX + barHeightC, temp, originX + barHeightC, temp + barWidth);
        g.drawLine(originX + barHeightC, temp + barWidth, originX, temp + barWidth);
        g.setColor(colorC);
        g.fillRect(originX + 1, temp + 1, barHeightC - 1, barWidth - 1);
        
        g.setColor(Color.BLACK);
        temp += barSectionWidth;
        g.drawLine(originX + 0, temp, originX + barHeightD, temp);
        g.drawLine(originX + barHeightD, temp, originX + barHeightD, temp + barWidth);
        g.drawLine(originX + barHeightD, temp + barWidth, originX, temp + barWidth);
        g.setColor(colorD);
        g.fillRect(originX + 1, temp + 1, barHeightD - 1, barWidth - 1);
        
        g.setColor(Color.BLACK);
        temp += barSectionWidth;
        g.drawLine(originX + 0, temp, originX + barHeightE, temp);
        g.drawLine(originX + barHeightE, temp, originX + barHeightE, temp + barWidth);
        g.drawLine(originX + barHeightE, temp + barWidth, originX, temp + barWidth);
        g.setColor(colorE);
        g.fillRect(originX + 1, temp + 1, barHeightE - 1, barWidth - 1);
    }
    
    private void paintPie(Graphics g, Color colorA, Color colorB, Color colorC, Color colorD, Color colorE) {
    	Question question = this.histogram.question;
        
        int amountA = 0;
        int amountB = 0;
        int amountC = 0;
        int amountD = 0;
        int amountE = 0;
        
        double percentA = 0;
        double percentB = 0;
        double percentC = 0;
        double percentD = 0;
        double percentE = 0;
    	
        if (question != null) {
            amountA = question.getResponseAAmont();
            amountB = question.getResponseBAmont();
            amountC = question.getResponseCAmont();
            amountD = question.getResponseDAmont();
            amountE = question.getResponseEAmont();
            
            percentA = question.getResponseAPercent();
            percentB = question.getResponseBPercent();
            percentC = question.getResponseCPercent();
            percentD = question.getResponseDPercent();
            percentE = question.getResponseEPercent();	
        }
    	
    	int canvasWidth = this.getWidth();
        int canvasHeight = this.getHeight();
        
        double angleA = percentA * 360 / 100;
        double angleB = percentB * 360 / 100;
        double angleC = percentC * 360 / 100;
        double angleD = percentD * 360 / 100;
        double angleE = percentE * 360 / 100;
        
        // Y position of the text line
        int baseLineY = (int)(canvasHeight * 0.8);
        
        // Space between texts of two choices: A and B, C and D, etc.
        int textSpace = (int)(canvasWidth / 5.0);
        
        // Sample square
        int squareSideLength = 20;
        int temp = (int)(textSpace / 2.0 - 45);
        g.drawRect(temp + textSpace * 0 - 1, baseLineY - 1, squareSideLength + 1, squareSideLength + 1);
        g.setColor(colorA);
        g.fillRect(temp + textSpace * 0, baseLineY, squareSideLength, squareSideLength);
        
        g.setColor(Color.BLACK);
        g.drawRect(temp + textSpace * 1 - 1, baseLineY - 1, squareSideLength + 1, squareSideLength + 1);
        g.setColor(colorB);
        g.fillRect(temp + textSpace * 1, baseLineY, squareSideLength, squareSideLength);
        
        g.setColor(Color.BLACK);
        g.drawRect(temp + textSpace * 2 - 1, baseLineY - 1, squareSideLength + 1, squareSideLength + 1);
        g.setColor(colorC);
        g.fillRect(temp + textSpace * 2, baseLineY, squareSideLength, squareSideLength);
        
        g.setColor(Color.BLACK);
        g.drawRect(temp + textSpace * 3 - 1, baseLineY - 1, squareSideLength + 1, squareSideLength + 1);
        g.setColor(colorD);
        g.fillRect(temp + textSpace * 3, baseLineY, squareSideLength, squareSideLength);
        
        g.setColor(Color.BLACK);
        g.drawRect(temp + textSpace * 4 - 1, baseLineY - 1, squareSideLength + 1, squareSideLength + 1);
        g.setColor(colorE);
        g.fillRect(temp + textSpace * 4, baseLineY, squareSideLength, squareSideLength);
        
        // Text
        g.setColor(Color.BLACK);
        temp = (int)(textSpace / 2.0 - 15);
        g.drawString("A: " + amountA + "(" + (int)Math.rint(percentA) + "%)", temp + textSpace * 0, baseLineY + 15);
        g.drawString("B: " + amountB + "(" + (int)Math.rint(percentB) + "%)", temp + textSpace * 1, baseLineY + 15);
        g.drawString("C: " + amountC + "(" + (int)Math.rint(percentC) + "%)", temp + textSpace * 2, baseLineY + 15);
        g.drawString("D: " + amountD + "(" + (int)Math.rint(percentD) + "%)", temp + textSpace * 3, baseLineY + 15);
        g.drawString("E: " + amountE + "(" + (int)Math.rint(percentE) + "%)", temp + textSpace * 4, baseLineY + 15);
        
        // Pie chart
        int centerX = (int)(canvasWidth / 2.0);
        int centerY = (int)(canvasHeight / 2.5);
        int arcSquareSideLength = (int)(canvasHeight / 5.0 * 3);
        
        g.setColor(colorA);
        double arcAngleA = percentA * Math.PI * 2 / 100;
        g.fillArc(centerX - (int)(arcSquareSideLength / 2), centerY - (int)(arcSquareSideLength / 2), arcSquareSideLength, arcSquareSideLength, 0, (int) - angleA);

        g.setColor(colorB);
        double arcAngleB = percentB * Math.PI * 2 / 100 + arcAngleA;
        g.fillArc(centerX - (int)(arcSquareSideLength / 2), centerY - (int)(arcSquareSideLength / 2), arcSquareSideLength, arcSquareSideLength, (int) - angleA, (int) - angleB);
       
        g.setColor(colorC);
        double arcAngleC = percentC * Math.PI * 2 / 100 + arcAngleB;
        g.fillArc(centerX - (int)(arcSquareSideLength / 2), centerY - (int)(arcSquareSideLength / 2), arcSquareSideLength, arcSquareSideLength, (int)(- angleA - angleB), (int) - angleC);
        
        g.setColor(colorD);
        double arcAngleD = percentD * Math.PI * 2 / 100 + arcAngleC;
        g.fillArc(centerX - (int)(arcSquareSideLength / 2), centerY - (int)(arcSquareSideLength / 2), arcSquareSideLength, arcSquareSideLength, (int)(- angleA - angleB - angleC), (int) - angleD);

        g.setColor(colorE);
		double arcAngleE = percentE * Math.PI * 2 / 100 + arcAngleD;
        g.fillArc(centerX - (int)(arcSquareSideLength / 2), centerY - (int)(arcSquareSideLength / 2), arcSquareSideLength, arcSquareSideLength, (int)(- angleA - angleB - angleC - angleD), (int) - angleE);
        
        // How many distinct choices?
        int choiceCount = (amountA == 0 ? 0 : 1) +
        					(amountB == 0 ? 0 : 1) +
        					(amountC == 0 ? 0 : 1) +
        					(amountD == 0 ? 0 : 1) +
        					(amountE == 0 ? 0 : 1);
        
        // Frame.
        if (choiceCount == 0) return;
        
        g.setColor(Color.BLACK);
        g.drawArc(centerX - (int)(arcSquareSideLength / 2), centerY - (int)(arcSquareSideLength / 2), arcSquareSideLength, arcSquareSideLength, 0, 360);        

        if (choiceCount > 1) {
	        g.drawLine(centerX, centerY, (int)(centerX + (float)arcSquareSideLength / 2 * Math.cos(arcAngleA)), 
	        							 (int)(centerY + (float)arcSquareSideLength / 2 * Math.sin(arcAngleA)));
	        g.drawLine(centerX, centerY, (int)(centerX + (float)arcSquareSideLength / 2 * Math.cos(arcAngleB)), 
	        							 (int)(centerY + (float)arcSquareSideLength / 2 * Math.sin(arcAngleB)));
	        g.drawLine(centerX, centerY, (int)(centerX + (float)arcSquareSideLength / 2 * Math.cos(arcAngleC)), 
	        							 (int)(centerY + (float)arcSquareSideLength / 2 * Math.sin(arcAngleC)));
	        g.drawLine(centerX, centerY, (int)(centerX + (float)arcSquareSideLength / 2 * Math.cos(arcAngleD)), 
	        							 (int)(centerY + (float)arcSquareSideLength / 2 * Math.sin(arcAngleD)));
	        g.drawLine(centerX, centerY, (int)(centerX + (float)arcSquareSideLength / 2 * Math.cos(arcAngleE)), 
	        							 (int)(centerY + (float)arcSquareSideLength / 2 * Math.sin(arcAngleE)));
        }
        
        // Write choice label beside pie chart.
        if (amountA != 0) {
        	g.drawString("A", (int)(centerX + ((float)arcSquareSideLength / 2 + 20) * Math.cos(arcAngleA / 2)), 
        				(int)(centerY + ((float)arcSquareSideLength / 2 + 20) * Math.sin(arcAngleA / 2)));
        }
        
        if (amountB != 0) {
        	g.drawString("B", (int)(centerX + ((float)arcSquareSideLength / 2 + 20) * Math.cos(arcAngleA + (arcAngleB - arcAngleA) / 2)), 
        				(int)(centerY + ((float)arcSquareSideLength / 2 + 20) * Math.sin(arcAngleA + (arcAngleB - arcAngleA) / 2)));
        }
        
        if (amountC != 0) {
        	g.drawString("C", (int)(centerX + ((float)arcSquareSideLength / 2 + 20) * Math.cos(arcAngleB + (arcAngleC - arcAngleB) / 2)), 
        				(int)(centerY + ((float)arcSquareSideLength / 2 + 20) * Math.sin(arcAngleB + (arcAngleC - arcAngleB) / 2)));
        }
        
        if (amountD != 0) {
        	g.drawString("D", (int)(centerX + ((float)arcSquareSideLength / 2 + 20) * Math.cos(arcAngleC + (arcAngleD - arcAngleC) / 2)), 
        				(int)(centerY + ((float)arcSquareSideLength / 2 + 20) * Math.sin(arcAngleC + (arcAngleD - arcAngleC) / 2)));
        }
        
        if (amountE != 0) {
        	g.drawString("E", (int)(centerX + ((float)arcSquareSideLength / 2 + 20) * Math.cos(arcAngleD + (arcAngleE - arcAngleD) / 2)), 
        				(int)(centerY + ((float)arcSquareSideLength / 2 + 20) * Math.sin(arcAngleD + (arcAngleE - arcAngleD) / 2)));
        }
    }

    /**
     * Paint while users are divided by lab groups.
     * @param g
     */
    private void paintLabVertical(Graphics g) {
    	// Size of canvas.
    	int canvasWidth = this.getWidth();
        int canvasHeight = this.getHeight();
        
        // Length of axis.
        int axisXLength = (int)(canvasWidth * 0.9);
        int axisYLength = (int)(canvasHeight * 0.8);
        
        // Origins at right lower point.
        int originX = (int)((canvasWidth  - axisXLength) / 1.5);
        int originY = (int)((canvasHeight - axisYLength) / 2 + axisYLength);
        
        // X axis.
        g.drawLine(originX, originY, originX + axisXLength, originY);
        
        // Y axis.
        g.drawLine(originX, originY, originX, originY - axisYLength);
        
        // Number of sections on Y axis; each section represents 10% people.
        int ySection = 10;
        
        // Section width on Y axis. 
        int sectionWidthY = (int)((double)axisYLength / (ySection + 1));	
        
        // Label separating segments on Y axis.
        for (int i = 1; i <= ySection; i++) {
        	g.drawLine(originX, originY - sectionWidthY * i, originX - 5, originY - sectionWidthY * i);
        }
        
        // Amount of percentage labels on Y axis.
        for (int i = 1; i <= ySection; i++) {
        	g.drawString(i * 10 + "%", originX - 35, originY - sectionWidthY * i + 5);
        }
        
        if (this.test.getCourse().isHasRegisteredInfo() == false) return;
        
        // Now the part begins that deals with lab groups.
        
    	// Name of each group.
        ArrayList<String> nameList = this.test.getCourse().getStudents().getSectionNameList();
        
        // Size of each group.
    	ArrayList<Integer> sizeList = this.test.getCourse().getStudents().getSectionSizeList();
    	
    	// Amount of lab groups.
    	int labGroupAmount = this.test.getCourse().getStudents().getLabSectionAmount();
        
    	// Participation bar value.
    	int participationBarVal = this.test.getCourse().getParticipationBarValue();
    	
    	// Performance bar value.
    	int performanceBarVal = this.test.getCourse().getPerformanceBarValue();
    	
        int sectionWidthX = (int)((double)axisXLength / (labGroupAmount));
        
        int barWidth = (int)(sectionWidthX * 0.6);
        
        // Label separating segments on X axis.
        for (int i = 1; i <= labGroupAmount; i++) {
        	g.drawLine(originX + sectionWidthX * i, originY, originX + sectionWidthX * i, originY + 5);
        }
        
        // Lab groups labels on X axis.
        for (int i = 0; i < labGroupAmount; i++) {
        	g.drawString(nameList.get(i).toString(), (int)((originX + originX + sectionWidthX) / 2 + sectionWidthX * i) - 10, originY + 20);
        }
        
    	Question question = this.histogram.question;
    	
    	if (question == null) {	// We only need to draw participation bar.
    		g.setColor(new Color(90, 90, 90));
    		
    		g.drawLine(originX - 5, (int)(originY - (sectionWidthY * 10) * ((double)participationBarVal / 100)), 
    				originX + axisXLength, (int)(originY - (sectionWidthY * 10) * ((double)participationBarVal / 100)));
    		return;
    	}
    	
    	LabInfoList labInfoList = question.getSummaryList().getLabInfoList();
        
        // Height representing percentage of people who've voted in each lab group.
        ArrayList<Integer> voteHeightList = new ArrayList<Integer>();
        for (int i = 0; i < labGroupAmount; i++) {
        	int totalVote = labInfoList.getTotalVotes(i);
        	voteHeightList.add((int)((double)(sectionWidthY * 10) / sizeList.get(i) * totalVote));
        }
        
        // Height representing percentage of people whose choices are correct.
        ArrayList<Integer> correctHeightList = new ArrayList<Integer>();
        for (int i = 0; i < labGroupAmount; i++) {
        	if (question.getCorrectAnswer() == EnumCorrectAnswer.NA || this.histogram.getHistogramDisplayOption() == HistogramDisplayOption.SHOWWITHOUTCORRECTANSWER) {
        		correctHeightList.add(voteHeightList.get(i));
        	} else {
        		int correctVote = labInfoList.getCorrectVoteAmount(i, question.getCorrectAnswer());
        		correctHeightList.add((int)((double)(sectionWidthY * 10) / sizeList.get(i) * correctVote));
        	}
        }
        
        // Height representing total amount of people whose choices are incorrect.
        ArrayList<Integer> incorrectHeightList = new ArrayList<Integer>();
        for (int i = 0; i < labGroupAmount; i++) {
        	incorrectHeightList.add(i, voteHeightList.get(i) - correctHeightList.get(i));
        }
        
        // Draw histogram
        int temp = originX + (int)((sectionWidthX - barWidth) / 2);
        
        for (int i = 0; i < labGroupAmount; i++) {
        	g.setColor(this.test.getLabColor().getLabColorCorrect());
        	g.fillRect(temp, originY - correctHeightList.get(i), barWidth, correctHeightList.get(i));
        	
        	g.setColor(this.test.getLabColor().getLabColorWrong());
            g.fillRect(temp, originY - incorrectHeightList.get(i) - correctHeightList.get(i), barWidth, incorrectHeightList.get(i));

            // Performance bar.
            g.setColor(new Color(90, 90, 90));
            g.drawLine(temp - 10, originY - (int)(voteHeightList.get(i) * (double)performanceBarVal / 100), temp + barWidth + 10, originY - (int)(voteHeightList.get(i) * (double)performanceBarVal / 100));
            
            temp += sectionWidthX;
        }
        
        // Participation bar.
        g.setColor(new Color(90, 90, 90));
        g.drawLine(originX - 5, (int)(originY - (sectionWidthY * 10) * ((double)participationBarVal / 100)), 
				   originX + axisXLength, (int)(originY - (sectionWidthY * 10) * ((double)participationBarVal / 100)));
    }

	private Test test;
	private Histogram histogram;
}
