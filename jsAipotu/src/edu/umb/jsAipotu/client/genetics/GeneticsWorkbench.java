package edu.umb.jsAipotu.client.genetics;/* this is the main class - the enetics workshop application * written by Brian White 2004 *  brian.white@umb.edu *   This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * */ import java.util.ArrayList;import com.google.gwt.user.cellview.client.CellList;import com.google.gwt.user.client.ui.CaptionPanel;import com.google.gwt.user.client.ui.ScrollPanel;import com.google.gwt.user.client.ui.VerticalPanel;import edu.umb.jsAipotu.client.molGenExp.MolGenExp;import edu.umb.jsAipotu.client.molGenExp.WorkPanel;import edu.umb.jsAipotu.client.molGenExp.Workbench;public class GeneticsWorkbench extends Workbench {	GeneticsWorkPanel upperGeneticsWorkPanel;	GeneticsWorkPanel lowerGeneticsWorkPanel;	ArrayList<Tray> trays;	CellList<Tray> geneticsHistoryList;		ScrollPanel histListScrollPanel;		int nextTrayNumber;	public GeneticsWorkbench (MolGenExp mge) {		super(mge);		trays = new ArrayList<Tray>();		setupUI();		nextTrayNumber = 0;	}	private void setupUI() {				CaptionPanel leftPanel = new CaptionPanel("History List");		geneticsHistoryList = new CellList<Tray>(new GeneticsHistListItem());		geneticsHistoryList.setWidth("100px");		histListScrollPanel = new ScrollPanel(geneticsHistoryList);		leftPanel.setContentWidget(histListScrollPanel);		add(leftPanel);				VerticalPanel centerPanel = new VerticalPanel();		upperGeneticsWorkPanel = new GeneticsWorkPanel("Upper Workpanel", this);		lowerGeneticsWorkPanel = new GeneticsWorkPanel("Lower Workpanel", this);		centerPanel.add(upperGeneticsWorkPanel);		centerPanel.add(lowerGeneticsWorkPanel);		add(centerPanel);	}			public void setCrossTwoButtonsEnabled(boolean b) {		upperGeneticsWorkPanel.setCrossTwoButtonEnabled(b);		lowerGeneticsWorkPanel.setCrossTwoButtonEnabled(b);	}		public void setSelfCrossButtonsEnabled(boolean b) {		upperGeneticsWorkPanel.setSelfCrossButtonEnabled(b);		lowerGeneticsWorkPanel.setSelfCrossButtonEnabled(b);	}		public void setMutateButtonsEnabled(boolean b) {		upperGeneticsWorkPanel.setMutateButtonEnabled(b);		lowerGeneticsWorkPanel.setMutateButtonEnabled(b);	}		public int getNextTrayNum() {		nextTrayNumber++;		return nextTrayNumber;	}		public GeneticsWorkPanel getLowerGeneticsWindow() {		return lowerGeneticsWorkPanel;	}		public GeneticsWorkPanel getUpperGeneticsWindow() {		return upperGeneticsWorkPanel;	}		public void setDefaultSelectionSettings() {		upperGeneticsWorkPanel.getGeneticsWorkPanelList().setDefaultSelectionSettings();		lowerGeneticsWorkPanel.getGeneticsWorkPanelList().setDefaultSelectionSettings();	}		public void setCustomSelectionSettings() {		upperGeneticsWorkPanel.getGeneticsWorkPanelList().setCustomSelectionSettings();		lowerGeneticsWorkPanel.getGeneticsWorkPanelList().setCustomSelectionSettings();			}	public void addToHistoryList(Object o) {		trays.add((Tray)o);		geneticsHistoryList.setRowData(trays);		mge.clearSelectedOrganisms();	}	public WorkPanel getLowerPanel() {		return lowerGeneticsWorkPanel;	}	public WorkPanel getUpperPanel() {		return upperGeneticsWorkPanel;	}	public void sendToLowerPanel(Object o) {		lowerGeneticsWorkPanel.setCurrentTray((Tray)o);	}		public void sendToUpperPanel(Object o) {		upperGeneticsWorkPanel.setCurrentTray((Tray)o);	}}