package edu.umb.jsAipotu.client.molBiol;/* this is the class that sets up the common GUI for the application * and the applet *  * written by Brian White 2005 *  brian.white@umb.edu *   This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * */ import com.google.gwt.canvas.dom.client.CssColor;import com.google.gwt.event.dom.client.ClickEvent;import com.google.gwt.event.dom.client.ClickHandler;import com.google.gwt.user.client.Window;import com.google.gwt.user.client.ui.Button;import com.google.gwt.user.client.ui.DialogBox;import com.google.gwt.user.client.ui.FocusPanel;import com.google.gwt.user.client.ui.HTML;import com.google.gwt.user.client.ui.HorizontalPanel;import com.google.gwt.user.client.ui.ScrollPanel;import com.google.gwt.user.client.ui.SimplePanel;import com.google.gwt.user.client.ui.TextBox;import com.google.gwt.user.client.ui.VerticalPanel;import edu.umb.jsAipotu.client.JsAipotu;import edu.umb.jsAipotu.client.biochem.FoldedProteinWithImages;import edu.umb.jsAipotu.client.biochem.FoldingManager;import edu.umb.jsAipotu.client.molGenExp.ExpressedAndFoldedGene;import edu.umb.jsAipotu.client.molGenExp.MolGenExp;import edu.umb.jsAipotu.client.molGenExp.WorkPanel;import edu.umb.jsAipotu.client.preferences.GlobalDefaults;public class MolBiolWorkpanel extends WorkPanel {	MolBiolWorkbench molBiolWorkbench;		//the parent MolBiolWorkbench that holds this window	MolGenExp mge;		//the parent application	VerticalPanel mainPanel;	FocusPanel geneDisplayWrapper;	GeneDisplayPanel geneDisplayPanel;	ScrollPanel geneDisplayScroller;	HorizontalPanel buttonPanel;	Button loadSampleButton;	Button newSequenceButton;	Button foldProteinButton;	SimplePanel colorChip;	HTML infoLabel;	// components for "Enter new DNA sequence" dialog	DialogBox enterDNAdialogBox;	VerticalPanel enterDNAdialogBoxContents;	HTML enterDNAdialogMessage;	TextBox enterDNAtextBox;	Button enterDNAcancelButton;	Button enterDNAokButton;	HorizontalPanel enterDNAdialogHolder;	String defaultDNA;	String DNA;	String promoterSequence;	String terminatorSequence;	String intronStartSequence;	String intronEndSequence;	String polyATail;	ExpressedGene currentGene;	FoldedProteinWithImages foldedProteinWithImages;	ExpressedAndFoldedGene efg;	int headerLength;        //length (as actually displayed) of the text 	// & labels before the start of the top DNA strand	int DNASequenceLength;	String caption;         //the caption at the bottom of the frame	String previousProteinString;  //the last protein sequence displayed	String currentProteinString;	int caretPosition;  //the number of the selected DNA base	GeneExpresser geneExpresser;	public MolBiolWorkpanel(String title, 			final MolBiolWorkbench genex,			final MolGenExp mge) {		super(title);		this.molBiolWorkbench = genex;		this.mge = mge;		MolBiolParams params = GlobalDefaults.molBiolParams;		geneExpresser = new GeneExpresser();		caretPosition = 0;		defaultDNA = params.getDefaultDNA();		DNA = params.getDefaultDNA();		DNASequenceLength = DNA.length();		promoterSequence = params.getPromoterSequence();		terminatorSequence = params.getTerminatorSequence();		intronStartSequence = params.getIntronStartSequence();		intronEndSequence = params.getIntronEndSequence();		polyATail = params.getPolyATail();		//if it's a prokaryote, no poly A tail		if (intronStartSequence.equals("none") || intronEndSequence.equals("none")) {			polyATail = "";		}		setupUI();	}	private void setupUI() {		mainPanel = new VerticalPanel();		geneDisplayPanel = new GeneDisplayPanel(this);		geneDisplayScroller = new ScrollPanel(geneDisplayPanel);		geneDisplayScroller.setStyleName("MoBoDNApanel");		geneDisplayWrapper = new FocusPanel(geneDisplayScroller);		mainPanel.add(geneDisplayWrapper);		buttonPanel = new HorizontalPanel();		buttonPanel.addStyleName("MoBoButtonPanel");		buttonPanel.add(new HTML("Color:  "));		colorChip = new SimplePanel();		colorChip.setStyleName("colorChip");		buttonPanel.add(colorChip);		loadSampleButton = new Button("Load Sample DNA", new ClickHandler() {			public void onClick(ClickEvent event) {				loadSampleDNA();			}		});		buttonPanel.add(loadSampleButton);		newSequenceButton = new Button("Enter New DNA", new ClickHandler() {			public void onClick(ClickEvent event) {				enterDNAdialogBox.center();			}		});		buttonPanel.add(newSequenceButton);		foldProteinButton = new Button("Fold Protein", new ClickHandler() {			public void onClick(ClickEvent event) {				foldExpressedProtein();			}		});		buttonPanel.add(foldProteinButton);		infoLabel = new HTML("Selected base = ?");		buttonPanel.add(infoLabel);		mainPanel.add(buttonPanel);		// Create a DialogBox with a button to close it		enterDNAdialogBox = new DialogBox(false);		enterDNAdialogBox.addStyleName("genex-dialogbox");		enterDNAdialogBoxContents = new VerticalPanel();		enterDNAdialogBox.setText("New DNA Sequence");		enterDNAdialogMessage = new HTML("Enter new DNA Sequence");		enterDNAdialogMessage.setStyleName("genex-dialogbox-message");		enterDNAtextBox = new TextBox();		enterDNAcancelButton = new Button("Cancel");		enterDNAcancelButton.addClickHandler(new ClickHandler() {			public void onClick(ClickEvent event) {				enterDNAdialogBox.hide();				enterDNAtextBox.setText("");			}		});		enterDNAokButton = new Button("OK");		enterDNAokButton.addClickHandler(new ClickHandler() {			public void onClick(ClickEvent event) {				previousProteinString = currentProteinString;				String newDNA = enterDNAtextBox.getText();				newDNA = newDNA.toUpperCase();				newDNA = newDNA.replaceAll("[^AGCT]","");				DNA = newDNA;				caretPosition = -1;				currentGene = geneExpresser.expressGene(DNA, -1);				refreshDisplay(currentGene, -1);				currentProteinString = currentGene.getProteinForDisplay();				headerLength = currentGene.getHeaderLength();				DNASequenceLength = currentGene.getDNA().length();  				showProteinChangedButNotFolded();				enterDNAdialogBox.hide();			}		});		enterDNAdialogHolder = new HorizontalPanel();		enterDNAdialogHolder.add(enterDNAcancelButton);		enterDNAdialogHolder.add(enterDNAokButton);		enterDNAdialogBoxContents.add(enterDNAdialogMessage);		enterDNAdialogBoxContents.add(enterDNAtextBox);		enterDNAdialogBoxContents.add(enterDNAdialogHolder);		enterDNAdialogBox.setWidget(enterDNAdialogBoxContents);		caption = new String("");		previousProteinString = new String("");		currentProteinString = new String("");		add(mainPanel);		//display a blank starting gene		DNA = "";		currentGene = geneExpresser.expressGene(DNA, -1);		geneDisplayPanel.setHTML(currentGene.getHtmlString() + caption + "</pre></body></html>");		headerLength = currentGene.getHeaderLength();		DNASequenceLength = currentGene.getDNA().length();		currentProteinString = currentGene.getProteinForDisplay();		showProteinChangedButNotFolded();	}	// button methods	private void loadSampleDNA() {		DNA = defaultDNA;		currentGene = geneExpresser.expressGene(DNA, -1);		refreshDisplay(currentGene, -1);		currentProteinString = currentGene.getProteinForDisplay();		headerLength = currentGene.getHeaderLength();		DNASequenceLength = currentGene.getDNA().length(); 		headerLength = currentGene.getHeaderLength(); 		showProteinChangedButNotFolded();	}	private void enterNewDNA() {		//		String newDNA = (String)JOptionPane.showInputDialog(null,		//				"Enter new DNA Sequence",		//				"New DNA Sequence",		//				JOptionPane.PLAIN_MESSAGE,		//				null, null, DNA);		//		if (newDNA == null) return;		//		previousProteinString = currentProteinString;		//		newDNA = newDNA.toUpperCase();		//		newDNA = newDNA.replaceAll("[^AGCT]","");		//		DNA = newDNA;		//		caretPosition = -1;		//		currentGene = geneExpresser.expressGene(DNA, -1);		//		refreshDisplay(currentGene, -1);		//		currentProteinString = currentGene.getProteinForDisplay();		//		headerLength = currentGene.getHeaderLength();		//		DNASequenceLength = currentGene.getDNA().length();  		//		showProteinChangedButNotFolded();	}	public String getDNA() {		return DNA;	}	// event handlers for the GeneDisplayPanel	public void handleClickEvent(int baseNum) {		ExpressedGene eg = geneExpresser.expressGene(DNA, baseNum);		refreshDisplay(eg, baseNum);		caretPosition = baseNum;	}	public void moveCursorLeft() {		caretPosition--;		if (caretPosition < 0) {			caretPosition = 0;		}      			currentGene = geneExpresser.expressGene(DNA, caretPosition);		refreshDisplay(currentGene, caretPosition);		DNASequenceLength = currentGene.getDNA().length();		headerLength = currentGene.getHeaderLength() + 1;       	}	public void moveCursorRight() {		caretPosition++;		if (caretPosition > (DNA.length() - 1)) {			caretPosition = DNA.length() - 1;		}		currentGene = geneExpresser.expressGene(DNA, caretPosition);		refreshDisplay(currentGene, caretPosition);		DNASequenceLength = currentGene.getDNA().length();		headerLength = currentGene.getHeaderLength() + 1;       	}	public void deleteBaseAtCursor() {		previousProteinString = currentProteinString;		StringBuffer workingDNAbuffer = new StringBuffer(DNA);		workingDNAbuffer.deleteCharAt(caretPosition);		DNA = workingDNAbuffer.toString();		if (caretPosition >= 0) {			caretPosition--;		}		currentGene = geneExpresser.expressGene(DNA, caretPosition);		refreshDisplay(currentGene, caretPosition);		currentProteinString = currentGene.getProteinForDisplay();		DNASequenceLength = currentGene.getDNA().length();		headerLength = currentGene.getHeaderLength();		showProteinChangedButNotFolded();					}	public void insertBaseAtCursor(String b) {		previousProteinString = currentProteinString;		StringBuffer workingDNAbuffer = new StringBuffer(DNA);		workingDNAbuffer.insert(caretPosition, b);		DNA = workingDNAbuffer.toString();		caretPosition++;		currentGene = geneExpresser.expressGene(DNA, caretPosition);		refreshDisplay(currentGene, caretPosition);		currentProteinString = currentGene.getProteinForDisplay();		DNASequenceLength = currentGene.getDNA().length();		headerLength = currentGene.getHeaderLength() + 1; 		//need the +1 otherwise, when you click on a base after moving + or -		// the selected base is n+1 - why??            		showProteinChangedButNotFolded();	}	public void changeBaseAtCursor(String b) {		previousProteinString = currentProteinString;		StringBuffer workingDNAbuffer = new StringBuffer(DNA);		workingDNAbuffer.replace(caretPosition, 				caretPosition + 1,				b.toUpperCase());		DNA = workingDNAbuffer.toString();		currentGene = geneExpresser.expressGene(DNA, caretPosition);		refreshDisplay(currentGene, caretPosition);		currentProteinString = currentGene.getProteinForDisplay();		DNASequenceLength = currentGene.getDNA().length();		headerLength = currentGene.getHeaderLength() + 1; 		//need the +1 otherwise, when you click on a base after moving + or -		// the selected base is n+1 - why??  		showProteinChangedButNotFolded();	}	public void foldExpressedProtein() {		//process the protein sequence into a form that		// the folding routine can understand		String proteinSequence = currentGene.getProtein();		//fold it		FoldingManager foldingManager = new FoldingManager();		foldedProteinWithImages = foldingManager.foldWithPix(proteinSequence);		// see if it was folded in a corner		if (foldedProteinWithImages.getFullSizePic() == null) {			Window.alert(GlobalDefaults.paintedInACornerNotice);							return;		}		colorChip.getElement().getStyle().setBackgroundColor(foldedProteinWithImages.getColor().toString());		showProteinFolded();		efg = new ExpressedAndFoldedGene(currentGene, foldedProteinWithImages);		//add to history list		molBiolWorkbench.addToHistoryList(new ExpressedGeneWithImages(efg));	}	public void refreshDisplay(ExpressedGene eg, int selectedBase) {		if (selectedBase != -1) {			infoLabel.setText("Selected Base = " + selectedBase);		}  else {			infoLabel.setText("Selected Base = ");		}		geneDisplayPanel.setHTML(eg.getHtmlString() 				+ "<font color=blue>" + previousProteinString 				+ "</font></pre><br><br><br><font size=+1>" + caption 				+ "</font></body></html>");	}	public void showProteinChangedButNotFolded() {		foldedProteinWithImages = null;		foldProteinButton.setEnabled(true);		this.getElement().getStyle().setBackgroundColor("pink");		buttonPanel.getElement().getStyle().setBackgroundColor("pink");;		colorChip.getElement().getStyle().setBackgroundColor("lightGray");		molBiolWorkbench.updateCombinedColor();		molBiolWorkbench.getMolGenExp().setAddToGreenhouseButtonEnabled(true);	}	public void showProteinFolded() {		foldProteinButton.setEnabled(false);		this.getElement().getStyle().setBackgroundColor("lightGray");		buttonPanel.getElement().getStyle().setBackgroundColor("lightGray");		molBiolWorkbench.getMolGenExp().setAddToGreenhouseButtonEnabled(true);	}	public CssColor getColor() {		if (foldedProteinWithImages != null) {			return foldedProteinWithImages.getColor();		} else {			return null;		}	}	public ExpressedAndFoldedGene getCurrentGene() {		return new ExpressedAndFoldedGene(currentGene, foldedProteinWithImages);	}	public void setCurrentGene(ExpressedAndFoldedGene efg) {		this.efg = efg;		currentGene = efg.getExpressedGene();		geneDisplayPanel.setHTML(currentGene.getHtmlString() + caption + "</pre></body></html>");		DNA = currentGene.getDNA();		headerLength = currentGene.getHeaderLength();		DNASequenceLength = DNA.length();		currentProteinString = currentGene.getProteinForDisplay();		showProteinFolded();		foldedProteinWithImages = efg.getFoldedProteinWithImages();		colorChip.getElement().getStyle().setBackgroundColor(foldedProteinWithImages.getColor().toString());		molBiolWorkbench.updateCombinedColor();	}}