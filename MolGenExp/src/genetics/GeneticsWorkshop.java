package genetics;/* this is the main class - the enetics workshop application * written by Brian White 2004 *  brian.white@umb.edu *   This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * */ import java.awt.Color;import java.awt.Dimension;import java.awt.GridLayout;import java.util.regex.Pattern;import javax.swing.BorderFactory;import javax.swing.Box;import javax.swing.BoxLayout;import javax.swing.DefaultListModel;import javax.swing.JOptionPane;import javax.swing.JPanel;import javax.swing.JScrollPane;import molGenExp.ColorModel;import molGenExp.MolGenExp;import molGenExp.Organism;import molGenExp.RYBColorModel;public class GeneticsWorkshop extends JPanel {	MolGenExp mge;	GeneticsWindow upperGeneticsWin;	GeneticsWindow lowerGeneticsWin;	ColorModel colorModel;	GeneticsMiddleButtonPanel geneticsMiddleButtonPanel;	GeneticsHistoryList geneticsHistoryList;	JScrollPane histListScrollPane;	public GeneticsWorkshop (MolGenExp mge) {		super();		this.mge = mge;		colorModel = mge.getOverallColorModel();		JPanel leftPanel = new JPanel();		geneticsHistoryList = 			new GeneticsHistoryList(new DefaultListModel(), mge);		histListScrollPane = new JScrollPane(geneticsHistoryList);		histListScrollPane.setBorder(				BorderFactory.createTitledBorder("History List"));		histListScrollPane.setMaximumSize(new Dimension(150,1000));		leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));		leftPanel.add(Box.createRigidArea(new Dimension(150,1)));		leftPanel.add(histListScrollPane);		geneticsMiddleButtonPanel = new GeneticsMiddleButtonPanel(this);		JPanel genexPanel = new JPanel();		genexPanel.setLayout(new GridLayout(2,1));		upperGeneticsWin = new GeneticsWindow(this);		lowerGeneticsWin = new GeneticsWindow(this);		genexPanel.add(upperGeneticsWin);		genexPanel.add(lowerGeneticsWin);		setLayout(new BoxLayout(this, BoxLayout.X_AXIS));		add(leftPanel);		add(geneticsMiddleButtonPanel);		add(genexPanel);	}	public void addTrayToHistoryList(Tray tray) {		geneticsHistoryList.add(tray);		histListScrollPane.revalidate();		histListScrollPane.repaint();	}	public void sendSelectedTrayToUP() {		if (geneticsHistoryList.getSelectedValue() != null) {			upperGeneticsWin.setCurrentTray(					(Tray)geneticsHistoryList.getSelectedValue());		}	}	public void sendSelectedTrayToLP() {		if (geneticsHistoryList.getSelectedValue() != null) {			lowerGeneticsWin.setCurrentTray(					(Tray)geneticsHistoryList.getSelectedValue());		}	}	public void saveOrganismToGreenhouse() {		//		if (mge.getSelectedOrganism() == null) {//			return;//		}		String name = "";		String warning = "";		Pattern p = Pattern.compile("[^A-Za-z0-9\\_]+");		while (name.equals("") || 				p.matcher(name).find() ||				mge.getGreenhouse().nameExistsAlready(name)){			name = JOptionPane.showInputDialog(					this,					warning +					"Give a unique name for your new organism.\n"					+ "This can only include letters, numbers, and "					+ "_.",					"Name your organism.",					JOptionPane.PLAIN_MESSAGE);			if (name == null) {				return;			}			if(mge.getGreenhouse().nameExistsAlready(name)) {				warning = "<html><font color=red>"					+ "The name you entered exists already,"					+ " please cancel or try again.</font>\n";			} else {				warning = "<html><font color=red>"					+ "The name you entered was not allowed," 					+ " please cancel or try again.</font>\n";			}		}//		Organism o = mge.getSelectedOrganism();//		o.setName(name);//		mge.saveToGreenhouse(o);	}}