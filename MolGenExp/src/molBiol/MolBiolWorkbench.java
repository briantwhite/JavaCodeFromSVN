package molBiol;/* this is the main class - the genex application * written by Brian White 2004 *  brian.white@umb.edu *   This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License * as published by the Free Software Foundation; either version 2 * of the License, or (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * */ import java.awt.Color;import java.awt.Dimension;import javax.swing.BorderFactory;import javax.swing.Box;import javax.swing.BoxLayout;import javax.swing.DefaultListModel;import javax.swing.JPanel;import javax.swing.JScrollPane;import molGenExp.ColorModel;import molGenExp.CombinedColorPanel;import molGenExp.HistoryList;import molGenExp.MolGenExp;import molGenExp.Organism;import molGenExp.WorkPanel;import molGenExp.Workbench;public class MolBiolWorkbench extends Workbench {	MolGenExp mge;	MolBiolWorkpanel upperMolBiolWorkpanel;	MolBiolWorkpanel lowerMolBiolWorkpanel;	GenexParams params;	CombinedColorPanel combinedColorPanel;	ColorModel colorModel;	HistoryList dnaHistoryList;	JScrollPane histListScrollPane;	public MolBiolWorkbench(MolGenExp mge) {		super(mge);		this.mge = mge;		params = new GenexParams();		colorModel = mge.getOverallColorModel();		JPanel leftPanel = new JPanel();		leftPanel.setBorder(				BorderFactory.createTitledBorder("History List"));		dnaHistoryList = new HistoryList(new DefaultListModel(), 				this, 				new DNAHistoryCellRenderer());		histListScrollPane = new JScrollPane(dnaHistoryList);		histListScrollPane.setMaximumSize(new Dimension(150,1000));		leftPanel.setLayout(new BoxLayout(leftPanel, BoxLayout.Y_AXIS));		leftPanel.add(Box.createRigidArea(new Dimension(150,1)));		leftPanel.add(histListScrollPane);		JPanel genexPanel = new JPanel();		genexPanel.setLayout(new BoxLayout(genexPanel, BoxLayout.Y_AXIS));		upperMolBiolWorkpanel = new MolBiolWorkpanel(				"Upper Gene Window", 				params, 				colorModel,				this, 				mge);		lowerMolBiolWorkpanel = new MolBiolWorkpanel(				"Lower Gene Window", 				params, 				colorModel,				this,				mge);		genexPanel.add(upperMolBiolWorkpanel);		combinedColorPanel = new CombinedColorPanel();		genexPanel.add(combinedColorPanel);		genexPanel.add(lowerMolBiolWorkpanel);		setLayout(new BoxLayout(this, BoxLayout.X_AXIS));		add(leftPanel);		add(genexPanel);	}	public void updateCombinedColor() {		if ((upperMolBiolWorkpanel == null) || (lowerMolBiolWorkpanel == null)) {			return;		}		if ((upperMolBiolWorkpanel.getColor() != null) 				&& (lowerMolBiolWorkpanel.getColor() != null)) {			Color combined = colorModel.mixTwoColors(					upperMolBiolWorkpanel.getColor(), 					lowerMolBiolWorkpanel.getColor());			combinedColorPanel.setCombinedColor(combined);		}		else {			combinedColorPanel.setCombinedColor(Color.LIGHT_GRAY);		}	}	public void saveOrganismToGreenhouse() {		// fold proteins if not aready done		if (upperMolBiolWorkpanel.getColor() == null) {			upperMolBiolWorkpanel.foldExpressedProtein();		}		if (lowerMolBiolWorkpanel.getColor() == null) {			lowerMolBiolWorkpanel.foldExpressedProtein();		}		Organism o = new Organism("",				upperMolBiolWorkpanel.getCurrentGene(),				lowerMolBiolWorkpanel.getCurrentGene(),				colorModel);		mge.saveOrganismToGreenhouse(o);	}	public void loadOrganism(Organism o) {		upperMolBiolWorkpanel.setCurrentGene(o.getGene1());		lowerMolBiolWorkpanel.setCurrentGene(o.getGene2());	}	public GenexParams getParams() {		return params;	}	public MolGenExp getMolGenExp() {		return mge;	}	public void addToHistoryList(Object o) {		dnaHistoryList.add(o);		histListScrollPane.revalidate();		histListScrollPane.repaint();		updateCombinedColor();	}	public WorkPanel getLowerPanel() {		return lowerMolBiolWorkpanel;	}	public WorkPanel getUpperPanel() {		return upperMolBiolWorkpanel;	}	public void sendToLowerPanel(Object o) {		lowerMolBiolWorkpanel.setCurrentGene(				(ExpressedGene)dnaHistoryList.getSelectedValue());	}	public void sendToUpperPanel(Object o) {		upperMolBiolWorkpanel.setCurrentGene(				(ExpressedGene)dnaHistoryList.getSelectedValue());	}}